/*!
 * tml
 * version: 1.0.0
 * description: 特美洛功能插件
 * build: Fri Jun 20 2014 15:51:38 GMT+0800 (中国标准时间)
 */

function isNullorEmpty(val) {
	if (val == '' || val == undefined) {
		return false;
	} else {
		return true;
	}
}

/**
 * 键值对数组。
 * @returns
 */
function Dictionary() {
	this.data = new Array();
	this.set = function(key, value) {
		this.data[key] = value;
	};
	this.get = function(key) {
		return this.data[key];
	};
	this.remove = function(key) {
		this.data[key] = null;
	};
	this.isEmpty = function() {
		return this.data.length == 0;
	};
	this.size = function() {
		return this.data.length;
	};
}

(function() {

	/**
	 * 调试日志插件
	 */
	var log_is_opend = true;
	(function($) {

		$.fn.logs = function(msg) {
			if (log_is_opend == true) {
				if (console) {
					var dt = new Date();
					console.log(dt + " :  %s: %o", msg, this);
				}
			}
			return this;
		};

	})(jQuery);

	/**
	 * 标签附加新增插件。仅配合DWZ 的ComBox一起使用，默认为添加 行业类型。 注意：
	 * 插件需要jquery.form.js插件支持，在模板文件数据提交前确保【form】插件已引入。
	 *
	 * @author 咏殇影@nbmxkj 20140604 使用： 定义标签 <select class="combox additem"
	 *         aurls="页面请求地址" atitle="新增" laywidth="700"> <option>请选择</option>
	 *         </select> 调用 $('.additem').additem(); 标签属性说明
	 *         aurls：dialog弹窗显示内容地址。为空时默认地址为【/system/Admin/index.php/MisSalesCustomer/lookupAddSelectValue/model/MisSalesCustomerIndustry】
	 *         atitle：dialog弹窗显示标题 laywidth：dialog弹窗宽度 layheight：dialog弹窗高度
	 */
	/*
	 * 修改示例 业务处理：/Lib/Action/CommonAction.class.php 函数 lookupInsertSelectValue()
	 * 修改其成功回返值，带上当前插入数据的信息，返回格式为{id:'',name:'',.....},id为下拉框value,name为下拉框text,不是对应数据库中字段。
	 * 代码修改如下： $pk = $model->getPk(); //保存当前数据对象 $list=$model->add(); if
	 * ($list!==false) { $data = $model->where("{$pk}={$list}")->select();
	 * $this->success ( L('_SUCCESS_') ,'',$data); exit; } else { $this->error (
	 * L('_ERROR_') ); }
	 *
	 * 模板： /Tpl/default/Public/lookupAddSelectValue.html <script> $(function(){
	 * $('#myForm').submit(function(data){ return false; }); }); function
	 * newsubmit(obj,aid){ obj = $(obj); obj.submit(function(data){ return
	 * false; }); if(obj.valid()){ obj.ajaxSubmit(function(data){
	 * if('string'==typeof(data)){ data=$.parseJSON(data); }
	 * if(!data.status){alertMsg.error(data.message)return;}
	 * $.pdialog.closeCurrent(); if('object'==typeof(data.data)){ var cont =
	 * $("#"+aid).prev(); var selObj = cont.find("select"); var showObj =
	 * cont.find("a:first"); var divCombox = cont.find("div:first");
	 * selObj.children().attr('selected',false); var optObj =
	 * $('#op_'+divCombox.attr('id'));
	 * optObj.html(optObj.html().replace('class="selected"',''));
	 * $.each(data.data , function(i,v){ var opt = $('<option></option>');
	 * opt.val(v.id).text(v.name).attr('selected',true); selObj.append(opt); var
	 * li = '<li><a value="'+v.id+'" class="selected" href="#">'+v.name+'</a></li>';
	 * optObj.append(li); showObj.html(v.name); }); optObj.find('li
	 * a').click(function(){ var $this=$(this);
	 * $this.parent().parent().find(".selected").removeClass("selected");
	 * $this.addClass("selected"); showObj.text($this.text()); var
	 * $input=$("select",cont); if($input.val()!=$this.attr("value")){
	 * $("select",cont).val($this.attr("value")).trigger("change"); } }); } }); } }
	 * </script> <div class="pageContent"> <form method="post"
	 * action="__URL__/lookupInsertSelectValue" class="pageForm
	 * required-validate" id="myForm" onsubmit="return
	 * newsubmit(this,'{$_REQUEST['aid']}')"> <input type="hidden" name="model"
	 * value="{$model}"> <div class="pageFormContent" layoutH="56"> <include
	 * file="$tplName" /> </div> <div class="formBar"> <ul> <li><div
	 * class="buttonActive"><div class="buttonContent"> <button
	 * type="submit">{$Think.lang.save}</button> </div></div></li> </ul>
	 * </div> </form> </div>
	 *
	 */

	(function($) {
		$.fn.additem = function(options) {
			var timestamp = (new Date()).valueOf();
			var $this = $(this);
			var defaults = {
				show : function(id, url, atitle, w, h) {
					var options = {};
					options.width = parseInt(w, 10) ? w : 500;
					options.height = parseInt(h, 10) ? h : 380;
					options.mask = true;
					options.resizable = false;
					options.maxable = false;
					options.minable = false;
					$.pdialog.open(url, id, atitle, options);
				}
			};
			var opts = $.extend(defaults, options);
			$.each($this, function(i, v) {
				var p = $($this).closest('div.combox');
				if (p.length)
					return;
				var id = 'nbm_panel_' + $.rand();
				var opts = $.extend(defaults, options);
				var item = $('<a></a>');
				item.attr('id', id).html('+').addClass('input-addon input-addon-add');
				$(v).after(item);
				item.click(function() {
					var $thisSelect = item.prev().find("select");
					var urls = $thisSelect.attr('aurls') ? $thisSelect.attr('aurls') : '/system/Admin/index.php/MisSalesCustomer/lookupAddSelectValue/model/MisSalesCustomerIndustry';
					var atitle = $thisSelect.attr('atitle') ? $thisSelect.attr('atitle') : '添加新项';
					var lw = $thisSelect.attr('laywidth') ? $thisSelect.attr('laywidth') : '';
					var lh = $thisSelect.attr('layheight') ? $thisSelect.attr('layheight') : '';
					var url = urls + '/accesstype/plugs/aid/' + id;
					opts.show(id, url, atitle, lw, lh);
				});
			});

		}
		$.extend({
			rand : function() {
				return Math.round(Math.random() * 10000000);
			}, // 数字单位转换，
			unitlPase : function(num, type, unitl) {
				if (isNaN(num)) {
					return '';
				} else {
					type = isNullorEmpty(type) ? type : 'w';
					unitl = isNullorEmpty(unitl) ? unitl : 'yuan';
					num = num.toString();
					var temp = num.split('');
					//var tempVal = Math.pow(10,temp.length-1);
					var unitlArr = $.unitlConfig();
					if (type == 'w') {
						if (unitlArr[unitl]) {
							//						num = parseInt(num , 10);
							if (unitlArr[unitl][2] == 1) {
								return num * unitlArr[unitl][0];
							} else {
								return num;
							}
						}
					} else {
						if (unitlArr[unitl]) {
							//num = parseInt(num , 10);
							//$(this).logs('没转换的值'+num);
							///$(this).logs('单位：'+unitlArr[unitl][0]+'_____'+unitlArr[unitl][1]);

							if (unitlArr[unitl][2] == 1) {
								return num / unitlArr[unitl][0];
							} else {
								return num;
							}
						}
					}
				}
			}, // 数字单位配置文件
			unitlConfig : function() {
				var unitlArr = new Object();
				unitlArr.yuan = [1, '元', 1];
				unitlArr.wan = [10000, '万元', 1];
				unitlArr.shiwang = [100000, '十万', 1];
				unitlArr.baiwang = [1000000, '百万', 1];
				unitlArr.qianwang = [10000000, '千万', 1];
				unitlArr.yi = [100000000, '亿', 1];
				unitlArr.pingfangmi = [1, '平方米', 0];
				unitlArr.ren = [1, '人', 0];
				unitlArr.hu = [1, '户', 0];
				unitlArr.wfz = [1, '万分之一', 0];
				unitlArr.qfz = [10, '千分之一', 0];
				unitlArr.bfz = [100, '百分之一', 0];
				unitlArr.mu = [1, '亩', 0];
				unitlArr.year = [1, '年', 0];
				unitlArr.month = [1, '月', 0];

				return unitlArr;
			}, // 数字格式化
			unitlFormat : function(num, unitl) {
				if (isNaN(num)) {
					return '';
				} else {
					num = num.toString();
					var unitlArr = $.unitlConfig();
					var temp = num.split('.');
					var condifgNum = unitlArr[unitl][0];
					if (temp[1] != undefined) {
						//						var orderNum =condifgNum.toString();
						//						// 允许输入两位小数
						//						var truelength = (orderNum.split('')).length+1;
						//						if(unitlArr[unitl][2]==1){
						//							temp[1] =parseInt(temp[1].substr(0 , truelength) , 10);
						//						}else{
						//							temp[1] = temp[1].substr(0 , 6);
						//						}
					}
					if (temp[0] != undefined) {
						// 用户可输入数字最大长度 8位
						temp[0] = parseInt(temp[0].substr(0, 8), 10);
					}
					var ret = temp[0] + (temp[1] == undefined ? '' : '.' + temp[1]);
					return ret;
				}
			},
			trimAll : function(str) {
				// 删除空格
				return str.replace(/(^\s*)|(\s*$)|(\s+)/g, "");
			},
			rfzero : function(str) {
				// 删除开头的数字0
				return str;
				// return str.replace(/(^0+.$)/g,'');
			},
			json2arr : function(jsonStr, relation) {

				/**
				 *	二维json转数组
				 * @parame jsonStr json字符串
				 * @return array|exception 返回数组或一异常信息。
				 * 试用示例：
				 * var jsonStr = '';
				 * var ret = $.json2arr(jsonStr);
				 * if(ret){
				 * //业务处理
				 * }
				 */

				try {
					var json;
					if (!jsonStr) {
						throw 'json is empty';
					}
					if ( typeof (jsonStr) == 'string') {
						json = eval("(" + jsonStr + ")");
					} else {
						json = jsonStr;
					}
					if (isNullorEmpty(relation)) {
						relation = eval("(" + relation + ")");
					}
					//console.log('你大爷的哦。');
					//console.log(relation);
					var arr = new Array();
					if (isNullorEmpty(relation)) {
						for (var i in json) {
							var temp = new Array();
							if ( typeof (json[i]) == 'string') {
								throw 'json format js error';
								return;
							}
							for (var item in relation) {
								temp[item] = json[i][relation[item]];
							}
							arr.push(temp);
						}
					} else {
						for (var i in json) {
							var temp = new Array();
							if ( typeof (json[i]) == 'string') {
								throw 'json format js error';
								return;
							}
							for (var item in json[i]) {
								temp[item] = json[i][item];
							}
							arr.push(temp);
						}
					}
					return arr;

				} catch(e) {
					return e.message || e;
					console.log(e.message || e);
				}
			},
			keys : function(object) {
				var keys = [];
				for (var property in object)
				  keys.push(property);
				return keys;
			},
			values : function(object) {
				var values = [];
				for (var property in object)
				  values.push(object[property]);
				return values;
			},
			key : function(object) {
				var key='';
				for (var property in object)
				  key = property;
				return key;
			},
			value : function(object) {
				var value = '';
				for (var property in object)
				  value = object[property];
				return value;
			}
		});
	})(jQuery);

	/**
	 * 回车替换tab功能 使用示例：$.enterToTab();
	 */
	(function($) {
		$.extend({
			enterToTab : function() {
				var fobj = $(':input:text:first');
				if ( typeof (fobj.attr('onfocus')) == 'undefined') {
					$(':input:text:first').focus();
				}
				$(':input:enabled').addClass('enterIndex');
				// get only input tags with class data-entry
				textboxes = $('.enterIndex');
				// now we check to see which browser is being used
				if ($.browser.mozilla) {
					$(textboxes).bind('keypress', CheckForEnter);
				} else {
					$(textboxes).bind('keydown', CheckForEnter);
				}

				function CheckForEnter(event) {
					//$(this).logs($(this).attr('class').indexOf('quicksearch'));
					if ($(this).attr('class').indexOf('quicksearch') > -1) {
						if ( typeof ($(this).attr('onfocus')) == 'undefined') {
							$(this).focus();
						}
						if ($.browser.mozilla) {
							$(this).unbind('keypress');
						} else {
							$(this).unbind('keydown');
						}
						return;
					}
					if (event.keyCode == 13 && $(this)[0].tagName != 'BUTTON' && $(this)[0].tagName != 'SUBMIT' && $(this)[0].tagName != 'TEXTAREA' && $(this)[0].tagName != 'SELECT' && $(this)[0].tagName != 'RESET') {
						var i = $('.enterIndex').index($(this));
						var n = $('.enterIndex').length;
						if (i < n - 1) {
							if ($(this).attr('type') != 'radio') {
								NextDOM($('.enterIndex'), i);
							} else {
								var last_radio = $('.enterIndex').index($('.enterIndex[type=radio][name=' + $(this).attr('name') + ']:last'));
								NextDOM($('.enterIndex'), last_radio);
							}
						}
						return false;
					}
				}

				function NextDOM(myjQueryObjects, counter) {
					if (myjQueryObjects.eq(counter + 1)[0].disabled || typeof ($(myjQueryObjects.eq(counter + 1)).attr('onfocus')) == 'string') {
						NextDOM(myjQueryObjects, counter + 1);
					} else {
						myjQueryObjects.eq(counter + 1).trigger('focus');
					}
				}

			}
		});

	})(jQuery);
	/*
	 * ! jQuery Form Plugin version: 2.43 (12-MAR-2010) @requires jQuery v1.3.2
	 * or later
	 *
	 * Examples and documentation at: http://malsup.com/jquery/form/ Dual
	 * licensed under the MIT and GPL licenses:
	 * http://www.opensource.org/licenses/mit-license.php
	 * http://www.gnu.org/licenses/gpl.html
	 */
	;
	(function($) {

		/*
		* Usage Note: ----------- Do not use both ajaxSubmit and ajaxForm on
		* the same form. These functions are intended to be exclusive. Use
		* ajaxSubmit if you want to bind your own submit handler to the form.
		* For example,
		*
		* $(document).ready(function() { $('#myForm').bind('submit', function() {
		* $(this).ajaxSubmit({ target: '#output' }); return false; // <--
		* important! }); });
		*
		* Use ajaxForm when you want the plugin to manage all the event binding
		* for you. For example,
		*
		* $(document).ready(function() { $('#myForm').ajaxForm({ target:
		* '#output' }); });
		*
		* When using ajaxForm, the ajaxSubmit function will be invoked for you
		* at the appropriate time.
		*/

		/**
		 * ajaxSubmit() provides a mechanism for immediately submitting an HTML
		 * form using AJAX.
		 */
		$.fn.ajaxSubmit = function(options) {
			// fast fail if nothing selected (http://dev.jquery.com/ticket/2752)
			if (!this.length) {
				logs('ajaxSubmit: skipping submit process - no element selected');
				return this;
			}

			if ( typeof options == 'function')
				options = {
					success : options
				};

			var url = $.trim(this.attr('action'));
			if (url) {
				// clean url (don't include hash vaue)
				url = (url.match(/^([^#]+)/) || [])[1];
			}
			url = url || window.location.href || '';

			options = $.extend({
				url : url,
				type : this.attr('method') || 'GET',
				iframeSrc : /^https/i.test(window.location.href || '') ? 'javascript:false' : 'about:blank'
			}, options || {});

			// hook for manipulating the form data before it is extracted;
			// convenient for use with rich editors like tinyMCE or FCKEditor
			var veto = {};
			this.trigger('form-pre-serialize', [this, options, veto]);
			if (veto.veto) {
				logs('ajaxSubmit: submit vetoed via form-pre-serialize trigger');
				return this;
			}

			// provide opportunity to alter form data before it is serialized
			if (options.beforeSerialize && options.beforeSerialize(this, options) === false) {
				logs('ajaxSubmit: submit aborted via beforeSerialize callback');
				return this;
			}

			var a = this.formToArray(options.semantic);
			if (options.data) {
				options.extraData = options.data;
				for (var n in options.data) {
					if (options.data[n] instanceof Array) {
						for (var k in options.data[n])
						a.push({
							name : n,
							value : options.data[n][k]
						});
					} else
						a.push({
							name : n,
							value : options.data[n]
						});
				}
			}

			// give pre-submit callback an opportunity to abort the submit
			if (options.beforeSubmit && options.beforeSubmit(a, this, options) === false) {
				logs('ajaxSubmit: submit aborted via beforeSubmit callback');
				return this;
			}

			// fire vetoable 'validate' event
			this.trigger('form-submit-validate', [a, this, options, veto]);
			if (veto.veto) {
				logs('ajaxSubmit: submit vetoed via form-submit-validate trigger');
				return this;
			}

			var q = $.param(a);

			if (options.type.toUpperCase() == 'GET') {
				options.url += (options.url.indexOf('?') >= 0 ? '&' : '?') + q;
				options.data = null;
				// data is null for 'get'
			} else
				options.data = q;
			// data is the query string for 'post'

			var $form = this, callbacks = [];
			if (options.resetForm)
				callbacks.push(function() {
					$form.resetForm();
				});
			if (options.clearForm)
				callbacks.push(function() {
					$form.clearForm();
				});

			// perform a load on the target only if dataType is not provided
			if (!options.dataType && options.target) {
				var oldSuccess = options.success ||
				function() {
				};
				callbacks.push(function(data) {
					var fn = options.replaceTarget ? 'replaceWith' : 'html';
					$(options.target)[fn](data).each(oldSuccess, arguments);
				});
			} else if (options.success)
				callbacks.push(options.success);

			options.success = function(data, status, xhr) {// jQuery 1.4+
				// passes xhr as 3rd
				// arg
				for (var i = 0, max = callbacks.length; i < max; i++)
					callbacks[i].apply(options, [data, status, xhr || $form, $form]);
			};

			// are there files to upload?
			var files = $('input:file', this).fieldValue();
			var found = false;
			for (var j = 0; j < files.length; j++)
				if (files[j])
					found = true;

			var multipart = false;
			// var mp = 'multipart/form-data';
			// multipart = ($form.attr('enctype') == mp ||
			// $form.attr('encoding') == mp);

			// options.iframe allows user to force iframe mode
			// 06-NOV-09: now defaulting to iframe mode if file input is
			// detected
			if ((files.length && options.iframe !== false) || options.iframe || found || multipart) {
				// hack to fix Safari hang (thanks to Tim Molendijk for this)
				// see:
				// http://groups.google.com/group/jquery-dev/browse_thread/thread/36395b7ab510dd5d
				if (options.closeKeepAlive)
					$.get(options.closeKeepAlive, fileUpload);
				else
					fileUpload();
			} else
				$.ajax(options);

			// fire 'notify' event
			this.trigger('form-submit-notify', [this, options]);
			return this;

			// private function for handling file uploads (hat tip to YAHOO!)
			function fileUpload() {
				var form = $form[0];

				if ($(':input[name=submit]', form).length) {
					alert('Error: Form elements must not be named "submit".');
					return;
				}

				var opts = $.extend({}, $.ajaxSettings, options);
				var s = $.extend(true, {}, $.extend(true, {}, $.ajaxSettings), opts);

				var id = 'jqFormIO' + (new Date().getTime());
				var $io = $('<iframe id="' + id + '" name="' + id + '" src="' + opts.iframeSrc + '" onload="(jQuery(this).data(\'form-plugin-onload\'))()" />');
				var io = $io[0];

				$io.css({
					position : 'absolute',
					top : '-1000px',
					left : '-1000px'
				});

				var xhr = {// mock object
					aborted : 0,
					responseText : null,
					responseXML : null,
					status : 0,
					statusText : 'n/a',
					getAllResponseHeaders : function() {
					},
					getResponseHeader : function() {
					},
					setRequestHeader : function() {
					},
					abort : function() {
						this.aborted = 1;
						$io.attr('src', opts.iframeSrc);
						// abort op in
						// progress
					}
				};

				var g = opts.global;
				// trigger ajax global events so that activity/block indicators
				// work like normal
				if (g && !$.active++)
					$.event.trigger("ajaxStart");
				if (g)
					$.event.trigger("ajaxSend", [xhr, opts]);

				if (s.beforeSend && s.beforeSend(xhr, s) === false) {
					s.global && $.active--;
					return;
				}
				if (xhr.aborted)
					return;

				var cbInvoked = false;
				var timedOut = 0;

				// add submitting element to data if we know it
				var sub = form.clk;
				if (sub) {
					var n = sub.name;
					if (n && !sub.disabled) {
						opts.extraData = opts.extraData || {};
						opts.extraData[n] = sub.value;
						if (sub.type == "image") {
							opts.extraData[n + '.x'] = form.clk_x;
							opts.extraData[n + '.y'] = form.clk_y;
						}
					}
				}

				// take a breath so that pending repaints get some cpu time
				// before the upload starts
				function doSubmit() {
					// make sure form attrs are set
					var t = $form.attr('target'), a = $form.attr('action');

					// update form attrs in IE friendly way
					form.setAttribute('target', id);
					if (form.getAttribute('method') != 'POST')
						form.setAttribute('method', 'POST');
					if (form.getAttribute('action') != opts.url)
						form.setAttribute('action', opts.url);

					// ie borks in some cases when setting encoding
					if (!opts.skipEncodingOverride) {
						$form.attr({
							encoding : 'multipart/form-data',
							enctype : 'multipart/form-data'
						});
					}

					// support timout
					if (opts.timeout)
						setTimeout(function() {
							timedOut = true;
							cb();
						}, opts.timeout);

					// add "extra" data to form if provided in options
					var extraInputs = [];
					try {
						if (opts.extraData)
							for (var n in opts.extraData)
							extraInputs.push($(
							'<input type="hidden" name="' + n
							+ '" value="'
							+ opts.extraData[n] + '" />')
							.appendTo(form)[0]);

						// add iframe to doc and submit the form
						$io.appendTo('body');
						$io.data('form-plugin-onload', cb);
						form.submit();
					} finally {
						// reset attrs and remove "extra" input elements
						form.setAttribute('action', a);
						t ? form.setAttribute('target', t) : $form.removeAttr('target');
						$(extraInputs).remove();
					}
				}

				;

				if (opts.forceSync)
					doSubmit();
				else
					setTimeout(doSubmit, 10);
				// this lets dom updates render

				var domCheckCount = 100;

				function cb() {
					if (cbInvoked)
						return;

					var ok = true;
					try {
						if (timedOut)
							throw 'timeout';
						// extract the server response from the iframe
						var data, doc;

						doc = io.contentWindow ? io.contentWindow.document : io.contentDocument ? io.contentDocument : io.document;

						var isXml = opts.dataType == 'xml' || doc.XMLDocument || $.isXMLDoc(doc);
						logs('isXml=' + isXml);
						if (!isXml && (doc.body == null || doc.body.innerHTML == '')) {
							if (--domCheckCount) {
								// in some browsers (Opera) the iframe DOM is
								// not always traversable when
								// the onload callback fires, so we loop a bit
								// to accommodate
								logs('requeing onLoad callback, DOM not available');
								setTimeout(cb, 250);
								return;
							}
							logs('Could not access iframe DOM after 100 tries.');
							return;
						}

						logs('response detected');
						cbInvoked = true;
						xhr.responseText = doc.body ? doc.body.innerHTML : null;
						xhr.responseXML = doc.XMLDocument ? doc.XMLDocument : doc;
						xhr.getResponseHeader = function(header) {
							var headers = {
								'content-type' : opts.dataType
							};
							return headers[header];
						};

						if (opts.dataType == 'json' || opts.dataType == 'script') {
							// see if user embedded response in textarea
							var ta = doc.getElementsByTagName('textarea')[0];
							if (ta)
								xhr.responseText = ta.value;
							else {
								// account for browsers injecting pre around
								// json response
								var pre = doc.getElementsByTagName('pre')[0];
								if (pre)
									xhr.responseText = pre.innerHTML;
							}
						} else if (opts.dataType == 'xml' && !xhr.responseXML && xhr.responseText != null) {
							xhr.responseXML = toXml(xhr.responseText);
						}
						data = $.httpData(xhr, opts.dataType);
					} catch (e) {
						logs('error caught:', e);
						ok = false;
						xhr.error = e;
						$.handleError(opts, xhr, 'error', e);
					}

					// ordering of these callbacks/triggers is odd, but that's
					// how $.ajax does it
					if (ok) {
						opts.success(data, 'success');
						if (g)
							$.event.trigger("ajaxSuccess", [xhr, opts]);
					}
					if (g)
						$.event.trigger("ajaxComplete", [xhr, opts]);
					if (g && !--$.active)
						$.event.trigger("ajaxStop");
					if (opts.complete)
						opts.complete(xhr, ok ? 'success' : 'error');

					// clean up
					setTimeout(function() {
						$io.removeData('form-plugin-onload');
						$io.remove();
						xhr.responseXML = null;
					}, 100);
				}

				;

				function toXml(s, doc) {
					if (window.ActiveXObject) {
						doc = new ActiveXObject('Microsoft.XMLDOM');
						doc.async = 'false';
						doc.loadXML(s);
					} else
						doc = (new DOMParser()).parseFromString(s, 'text/xml');
					return (doc && doc.documentElement && doc.documentElement.tagName != 'parsererror') ? doc : null;
				}

				;
			}

			;
		};

		/**
		 * ajaxForm() provides a mechanism for fully automating form submission.
		 *
		 * The advantages of using this method instead of ajaxSubmit() are:
		 *
		 * 1: This method will include coordinates for <input type="image" />
		 * elements (if the element is used to submit the form). 2. This method
		 * will include the submit element's name/value data (for the element
		 * that was used to submit the form). 3. This method binds the submit()
		 * method to the form for you.
		 *
		 * The options argument for ajaxForm works exactly as it does for
		 * ajaxSubmit. ajaxForm merely passes the options argument along after
		 * properly binding events for submit elements and the form itself.
		 */
		$.fn.ajaxForm = function(options) {
			return this.ajaxFormUnbind().bind('submit.form-plugin', function(e) {
				e.preventDefault();
				$(this).ajaxSubmit(options);
			}).bind('click.form-plugin', function(e) {
				var target = e.target;
				var $el = $(target);
				if (!($el.is(":submit,input:image"))) {
					// is this a child element of the submit el? (ex: a span
					// within a button)
					var t = $el.closest(':submit');
					if (t.length == 0)
						return;
					target = t[0];
				}
				var form = this;
				form.clk = target;
				if (target.type == 'image') {
					if (e.offsetX != undefined) {
						form.clk_x = e.offsetX;
						form.clk_y = e.offsetY;
					} else if ( typeof $.fn.offset == 'function') {// try to
						// use
						// dimensions
						// plugin
						var offset = $el.offset();
						form.clk_x = e.pageX - offset.left;
						form.clk_y = e.pageY - offset.top;
					} else {
						form.clk_x = e.pageX - target.offsetLeft;
						form.clk_y = e.pageY - target.offsetTop;
					}
				}
				// clear form vars
				setTimeout(function() {
					form.clk = form.clk_x = form.clk_y = null;
				}, 100);
			});
		};

		// ajaxFormUnbind unbinds the event handlers that were bound by ajaxForm
		$.fn.ajaxFormUnbind = function() {
			return this.unbind('submit.form-plugin click.form-plugin');
		};

		/**
		 * formToArray() gathers form element data into an array of objects that
		 * can be passed to any of the following ajax functions: $.get, $.post,
		 * or load. Each object in the array has both a 'name' and 'value'
		 * property. An example of an array for a simple login form might be:
		 *  [ { name: 'username', value: 'jresig' }, { name: 'password', value:
		 * 'secret' } ]
		 *
		 * It is this array that is passed to pre-submit callback functions
		 * provided to the ajaxSubmit() and ajaxForm() methods.
		 */
		$.fn.formToArray = function(semantic) {
			var a = [];
			if (this.length == 0)
				return a;

			var form = this[0];
			var els = semantic ? form.getElementsByTagName('*') : form.elements;
			if (!els)
				return a;
			for (var i = 0, max = els.length; i < max; i++) {
				var el = els[i];
				var n = el.name;
				if (!n)
					continue;

				if (semantic && form.clk && el.type == "image") {
					// handle image inputs on the fly when semantic == true
					if (!el.disabled && form.clk == el) {
						a.push({
							name : n,
							value : $(el).val()
						});
						a.push({
							name : n + '.x',
							value : form.clk_x
						}, {
							name : n + '.y',
							value : form.clk_y
						});
					}
					continue;
				}

				var v = $.fieldValue(el, true);
				if (v && v.constructor == Array) {
					for (var j = 0, jmax = v.length; j < jmax; j++)
						a.push({
							name : n,
							value : v[j]
						});
				} else if (v !== null && typeof v != 'undefined')
					a.push({
						name : n,
						value : v
					});
			}

			if (!semantic && form.clk) {
				// input type=='image' are not found in elements array! handle
				// it here
				var $input = $(form.clk), input = $input[0], n = input.name;
				if (n && !input.disabled && input.type == 'image') {
					a.push({
						name : n,
						value : $input.val()
					});
					a.push({
						name : n + '.x',
						value : form.clk_x
					}, {
						name : n + '.y',
						value : form.clk_y
					});
				}
			}
			return a;
		};

		/**
		 * Serializes form data into a 'submittable' string. This method will
		 * return a string in the format: name1=value1&amp;name2=value2
		 */
		$.fn.formSerialize = function(semantic) {
			// hand off to jQuery.param for proper encoding
			return $.param(this.formToArray(semantic));
		};

		/**
		 * Serializes all field elements in the jQuery object into a query
		 * string. This method will return a string in the format:
		 * name1=value1&amp;name2=value2
		 */
		$.fn.fieldSerialize = function(successful) {
			var a = [];
			this.each(function() {
				var n = this.name;
				if (!n)
					return;
				var v = $.fieldValue(this, successful);
				if (v && v.constructor == Array) {
					for (var i = 0, max = v.length; i < max; i++)
						a.push({
							name : n,
							value : v[i]
						});
				} else if (v !== null && typeof v != 'undefined')
					a.push({
						name : this.name,
						value : v
					});
			});
			// hand off to jQuery.param for proper encoding
			return $.param(a);
		};

		/**
		 * Returns the value(s) of the element in the matched set. For example,
		 * consider the following form:
		 *
		 * <form><fieldset> <input name="A" type="text" /> <input name="A"
		 * type="text" /> <input name="B" type="checkbox" value="B1" /> <input
		 * name="B" type="checkbox" value="B2"/> <input name="C" type="radio"
		 * value="C1" /> <input name="C" type="radio" value="C2" /> </fieldset></form>
		 *
		 * var v = $(':text').fieldValue(); // if no values are entered into the
		 * text inputs v == ['',''] // if values entered into the text inputs
		 * are 'foo' and 'bar' v == ['foo','bar']
		 *
		 * var v = $(':checkbox').fieldValue(); // if neither checkbox is
		 * checked v === undefined // if both checkboxes are checked v == ['B1',
		 * 'B2']
		 *
		 * var v = $(':radio').fieldValue(); // if neither radio is checked v
		 * === undefined // if first radio is checked v == ['C1']
		 *
		 * The successful argument controls whether or not the field element
		 * must be 'successful' (per
		 * http://www.w3.org/TR/html4/interact/forms.html#successful-controls).
		 * The default value of the successful argument is true. If this value
		 * is false the value(s) for each element is returned.
		 *
		 * Note: This method *always* returns an array. If no valid value can be
		 * determined the array will be empty, otherwise it will contain one or
		 * more values.
		 */
		$.fn.fieldValue = function(successful) {
			for (var val = [], i = 0, max = this.length; i < max; i++) {
				var el = this[i];
				var v = $.fieldValue(el, successful);
				if (v === null || typeof v == 'undefined' || (v.constructor == Array && !v.length))
					continue;
				v.constructor == Array ? $.merge(val, v) : val.push(v);
			}
			return val;
		};

		/**
		 * Returns the value of the field element.
		 */
		$.fieldValue = function(el, successful) {
			var n = el.name, t = el.type, tag = el.tagName.toLowerCase();
			if ( typeof successful == 'undefined')
				successful = true;

			if (successful && (!n || el.disabled || t == 'reset' || t == 'button' || (t == 'checkbox' || t == 'radio') && !el.checked || (t == 'submit' || t == 'image') && el.form && el.form.clk != el || tag == 'select' && el.selectedIndex == -1))
				return null;

			if (tag == 'select') {
				var index = el.selectedIndex;
				if (index < 0)
					return null;
				var a = [], ops = el.options;
				var one = (t == 'select-one');
				var max = ( one ? index + 1 : ops.length);
				for (var i = ( one ? index : 0); i < max; i++) {
					var op = ops[i];
					if (op.selected) {
						var v = op.value;
						if (!v)// extra pain for IE...
							v = (op.attributes && op.attributes['value'] && !(op.attributes['value'].specified)) ? op.text : op.value;
						if (one)
							return v;
						a.push(v);
					}
				}
				return a;
			}
			return el.value;
		};

		/**
		 * Clears the form data. Takes the following actions on the form's input
		 * fields: - input text fields will have their 'value' property set to
		 * the empty string - select elements will have their 'selectedIndex'
		 * property set to -1 - checkbox and radio inputs will have their
		 * 'checked' property set to false - inputs of type submit, button,
		 * reset, and hidden will *not* be effected - button elements will *not*
		 * be effected
		 */
		$.fn.clearForm = function() {
			return this.each(function() {
				$('input,select,textarea', this).clearFields();
			});
		};

		/**
		 * Clears the selected form elements.
		 */
		$.fn.clearFields = $.fn.clearInputs = function() {
			return this.each(function() {
				var t = this.type, tag = this.tagName.toLowerCase();
				if (t == 'text' || t == 'password' || tag == 'textarea')
					this.value = '';
				else if (t == 'checkbox' || t == 'radio')
					this.checked = false;
				else if (tag == 'select')
					this.selectedIndex = -1;
			});
		};

		/**
		 * Resets the form data. Causes all form elements to be reset to their
		 * original value.
		 */
		$.fn.resetForm = function() {
			return this.each(function() {
				// guard against an input with the name of 'reset'
				// note that IE reports the reset function as an
				// 'object'
				if ( typeof this.reset == 'function' || ( typeof this.reset == 'object' && !this.reset.nodeType))
					this.reset();
			});
		};

		/**
		 * Enables or disables any matching elements.
		 */
		$.fn.enable = function(b) {
			if (b == undefined)
				b = true;
			return this.each(function() {
				this.disabled = !b;
			});
		};

		/**
		 * Checks/unchecks any matching checkboxes or radio buttons and
		 * selects/deselects and matching option elements.
		 */
		$.fn.selected = function(select) {
			if (select == undefined)
				select = true;
			return this.each(function() {
				var t = this.type;
				if (t == 'checkbox' || t == 'radio')
					this.checked = select;
				else if (this.tagName.toLowerCase() == 'option') {
					var $sel = $(this).parent('select');
					if (select && $sel[0] && $sel[0].type == 'select-one') {
						// deselect all other options
						$sel.find('option').selected(false);
					}
					this.selected = select;
				}
			});
		};

		// helper fn for console logging
		// set $.fn.ajaxSubmit.debug to true to enable debug logging
		function logs() {
			if ($.fn.ajaxSubmit.debug) {
				var msg = '[jquery.form] ' + Array.prototype.join.call(arguments, '');
				if (window.console && window.console.log)
					window.console.logs(msg);
				else if (window.opera && window.opera.postError)
					window.opera.postError(msg);
			}
		}

		;

	})(jQuery);

	/**
	 * 下拉框多级联动。
	 *
	 * @author 咏殇影@nbmxkj 20140529
	 * 使用方法：var conf = new Object();
	 * 			conf.data ='JSON格式的数据';
	 * 			conf.tag = 'JSON串中用每级数据的键名，如：key or 0,1具体以实际使用为准备。数据间以逗号分隔';
	 * 			conf.tex = '显示字段';
	 * 			conf.val = '值字段';
	 *         	conf.pid = '每一组数据的父ID，首项不需要，数据间以逗号分隔';
	 *         	conf.defaultVal ='默认显示数据ID，数据间以逗号分隔';
	 *         	$.linkage(conf);
	 *  示例： $(function(){
	 *  		$.ajax({
	 *         		url:'/dwz_test/Data/index.php/Json/index', dataType:'json',
	 *         		success:function(msg){
	 *    				var conf = new Object();
	 *         			conf.ids ='.sel1,.sel2,.sel3,.sel4';//'#sel1,#sel2,#sel3,#sel4';
	 *         			conf.tag ='c,d,j,f';
	 *         			conf.pid = 'cid,did,jid';
	 *         			conf.data = msg;
	 *         			conf.tex = 'name'; conf.val = 'id'; //conf.defaultVal='3,4,10';
	 *         			$.linkage(conf);
	 *         		}
	 *        	});
	 *        });
	 */
	(function($) {
		$.linkage = function(_settings) {
			var UNF = 'undefined', EMPTY = '', curType = 'checktype', //组件类型
			curTag = 'checkorder';
			//唯一标识
			var c = settings = jQuery.extend({
				ids : '',
				data : '', // 数据
				tag : '', //数据标识,数据的key
				tex : '', //显示标识
				val : '', //值标识
				pid : '', //其父级标识字段
				container : '', // 容器
				defaultVal : '', // 默认值，按项设置
				header : '', // 首项值设定
				istree : true, // 是否开启树形数据功能。
				islastchoice : false // 是否开启最下一项可选择功能
			}, _settings);
			if (c.tag == '' || c.ids == '' || c.pid == '' || c.tex == '' || c.val == '') {
				console.log('\u914d\u7f6e\u5931\u8d25\uff0c\u8bf7\u53c2\u7167\u8bf4\u660e\u914d\u7f6e\u3002');
				return;
			}
			c.container = isNullorEmpty(c.container) ? c.container : $(document);
			//切割 组合基础数据
			c.tag = c.tag.split(',');
			c.ids = c.ids.split(',');
			c.pid = c.pid.split(',');
			if (isNullorEmpty(c.defaultVal)) {
				c.defaultVal = c.defaultVal.split(',')
			}
			//将现有数据源以个选项个数对应切割
			var data = new Object();
			if ( typeof (c.data) == 'string') {
				try {
					c.data = $.parseJSON(settings.data);
				} catch(e) {
					alert('JSON格式转换错误! ' + "ERROR: " + e.name + ' INFO:' + e.message);
				}
			}
			//$(this).logs(c.data.length);
			/*	if(isNullorEmpty(c.data) ){
			for(var i=0 ; i< c.ids.length ; i++){
			//data.push(c.data[c.tag[i]]);
			data[c.tag[i]] =c.data[c.tag[i]];
			}
			}else{
			console.log('\u5f53\u524d\u6570\u636e\u6e90\u7c7b\u578b\u4e3a：'+typeof(c.data)+'\u3002\u7cfb\u7edf\u4e0d\u63a5\u53d7\u6b64\u7c7b\u6570\u636e\uff0c\u5f53\u524d\u4ec5\u63a5\u53d7JSON');
			return;
			} */
			/**
			 * 组件实现原理;
			 * 1.得到所有级标签对象
			 * 2。给每一级标签对象绑定事件，
			 *
			 */
			// 获取所有级的标签对象
			$.each(c.ids, function(k, v) {
				var html = '';
				if (k == 0) {
					html = setItemData('', k);
				} else {
					html = setItemData($('select' + c.ids[k - 1] + ':first', c.container).val(), k);
				}

				var curTypeValue = $('select' + v + ':first', c.container).attr(curType);
				if (!isNullorEmpty(curTypeValue)) {

					var tagTypeCls = $('select' + v + ':first', c.container).attr('class') || ' ';
					//$(this).logs('tagTypeCls:'+tagTypeCls);
					var isRet = tagTypeCls.search(/combox/i);
					var trueCls = 'chosen';
					if (isRet > -1) {
						trueCls = 'combox';
					}
					//$(this).logs(isRet);
					$('select' + v + ':first', c.container).attr(curType, trueCls)
				}

				//  给每一项绑定默认显示值
				$('select' + v + ':first', c.container).html(html);
				if ($('select' + v + ':first', c.container).attr(curType) == 'chosen') {
					init();
				} else {
					initCombox($('select' + v + ':first', c.container), html);
				}
				$('select' + v + ':first', c.container).attr(curTag, c.ids[k]);
				$('select' + v + ':first', c.container).addClass($('select' + v + ':first', c.container).attr('atcls'));
				$('select' + v + ':first', c.container).on('change', function() {

					// 取得当前选中值
					var th = this;
					// 取得下一项的可用数据
					var next = getNext(v);
					if (next > -1) {
						var html = setItemData($(this).val(), next);
						$('select' + c.ids[next] + ':first', c.container).html(html);
						$('select' + c.ids[next] + ':first', c.container).change();

						//init();
						if ($('select' + c.ids[next] + ':first', c.container).attr(curType) == 'chosen') {
							init();
						} else {
							initCombox($('select' + c.ids[next] + ':first', c.container), html);
						}
					}
				});

			});

			function setItemData(pid, index) {
				var html = ' ';
				if (isNullorEmpty(c.header)) {
					html = '<option value="">' + c.header + '</option>';
				}

				var tag = c.tag[index];
				var data = c.data;
				var tempData = data[tag];
				var defautl = c.defaultVal[index];
				if (isNullorEmpty(tempData)) {
					var str = '';
					$.each(tempData, function(key, val) {
						var dis = '', sel = '', level = '';
						if (true == c.istree && val['level'] != undefined) {
							level = 'class="level' + val['level'] + '"';
						}
						if (true == c.islastchoice && val['nextEnd'] != undefined) {
							if (val['nextEnd'] == 0) {
								dis = 'disabled="disabled"';
							}
						}
						if (defautl && val[c.val] == defautl) {
							sel = 'selected="selected"';
						}
						if (index > 0) {
							if (pid && isNullorEmpty(c.pid[index - 1])) {
								if (val[c.pid[index - 1]] == pid) {
									html += '<option ' + dis + ' ' + level + ' ' + sel + ' value="' + val[c.val] + '">' + val[c.tex] + '</option>';
								}
							}
						} else {
							html += '<option ' + dis + ' ' + level + ' ' + sel + '  value="' + val[c.val] + '">' + val[c.tex] + '</option>';
						}
					});
				} else {
					$(this).logs('没有可用数据');
				}
				//$(this).logs('pid:'+index+'下一项：'+index +'ids:'+c.ids[index] +'当前选中项:'+pid+'++ html :'+ html);
				return html;
			}

			/**
			 * 获取当前项在ID列表中的位置。
			 */
			function getCur(val) {
				var data = c.ids;
				for (var i in data) {
					if (data[i] == val) {
						return i;
					}
				}
			}

			/**
			 * 获取当前项在ID列表中的位置。
			 */
			function getNext(val) {
				var data = c.ids;
				var ret = -1;
				for (var i in data) {
					i = parseInt(i, 10);
					if (data[i] == val && isNullorEmpty(data[i + 1])) {
						ret = i + 1;
					}
				}
				return ret;
			}

			function init() {
				$('select.chosen', c.container).attr('data-placeholder', '没有可用数据');
				$('select.chosen', c.container).chosen('destroy');
				$('select.chosen', c.container).chosen({
					// 检索时没找到文本提示内容
					no_results_text : "未找到此选项!",
					// 检索规则， 默认为false
					// false:从首字母开始
					// true:任一位置
					search_contains : true
				});
			}

			function initCombox($ref, op) {
				var $refCombox = $($ref).parents("div.combox:first");
				$ref.html(op).insertAfter($refCombox);
				$refCombox.remove();
				$ref.combox();
				$ref.select2();
			}

			return;
			/**
			 * 原版代码。
			 */
			c.container = isNullorEmpty(c.container) ? c.container : $(document);
			//切割 组合基础数据
			c.tag = c.tag.split(',');
			c.ids = c.ids.split(',');
			c.pid = c.pid.split(',');
			if ( typeof (c.defaultVal) != UNF) {
				c.defaultVal = c.defaultVal.split(',')
			}
			//将现有数据源以个选项个数对应切割
			var data = new Array();
			if ( typeof (settings.data) == 'string') {
				try {
					settings.data = $.parseJSON(settings.data);
				} catch(e) {
					alert('JSON格式转换错误! ' + "ERROR: " + e.name + ' INFO:' + e.message);
				}
			}

			if ( typeof (settings.data) == 'object') {
				for (var i = 0; i < c.ids.length; i++) {
					data.push(c.data[c.tag[i]]);
				}
			} else {
				console.log('\u5f53\u524d\u6570\u636e\u6e90\u7c7b\u578b\u4e3a：' + typeof (c.data) + '\u3002\u7cfb\u7edf\u4e0d\u63a5\u53d7\u6b64\u7c7b\u6570\u636e\uff0c\u5f53\u524d\u4ec5\u63a5\u53d7JSON');
				return;
			}

			var curVal = '';
			for (var i = 0; i < c.ids.length; i++) {
				//有默认值。
				// 当前项的选项数据源为默认对应下标前一个的父级ID值。
				//特殊处理首项，首项不存前一项。
				if (c.defaultVal != EMPTY) {
					pids = c.defaultVal;
					creatItem(getFitData(i, pids[i - 1]), i, c.defaultVal[i]);
				} else {
					var temp = getFitData(i, curVal);
					if (isNullorEmpty(temp) && isNullorEmpty(temp[0])) {
						curVal = temp[0][c.val];
					}
					creatItem(temp, i, curVal);
				}
				$('select' + c.ids[i] + ':first', c.container).unbind('change');
				$('select' + c.ids[i] + ':first', c.container).bind('change', function() {
					changeItem($(this));
				});
			}
			function getSub(val, data) {
				for (var i in data) {
					if (data[i] == val) {
						return i;
					}
				}
			}

			/**
			 * 生成指定项的option
			 * @parame data 数据
			 * @parame i 生成项的ID集合下标
			 * @parame selItemVal 默认选中项值
			 */
			function creatItem(data, i, selItemVal) {
				if (!isNullorEmpty($('select' + c.ids[i] + ':first', c.container).attr(curTag))) {
					$('select' + c.ids[i] + ':first', c.container).attr(curTag, c.ids[i]);
				}
				$(c.ids[i] + ':first', c.container).html(' ');
				var op = '';
				$ref = $('select' + c.ids[i] + ':first', c.container);
				if (!isNullorEmpty(data)) {
					op = '<option value="" selected>\u6ca1\u6709\u6570\u636e</option>';
				} else {
					var seled = '';
					$.each(data, function(k, v) {
						if ( typeof (selItemVal) != UNF && selItemVal == v[c.val]) {
							seled = 'selected="selected"';
						} else {
							seled = '';
						}
						op += '<option value="' + v[c.val] + '" ' + seled + '>' + v[c.tex] + '</option>';
					});
				}
				//if(isNullorEmpty($('select'+c.ids[i]).attr(curType))){
				var $refCombox = $ref.parents("div.combox:first");
				$ref.html(op).insertAfter($refCombox);
				$refCombox.remove();
				$ref.trigger("change").combox();
				//$ref.combox();
				/*}else{
				 $ref.html(op);
				 }*/
			}

			/**
			 * 获取符合条件的数据集
			 * @parame index 	项下标
			 * @parame curVal	父级Id值
			 **/
			function getFitData(index, pid) {
				// 是不是首项，判断PID 值是否存在
				//console.log('序号:'+index +'  父ID值：'+pid);
				index = parseInt(index, 10);
				var temp = data[index];
				if (!isNullorEmpty(temp))
					return '';
				var tdata = new Array();
				if (!isNullorEmpty(pid)) {
					tdata = temp;
				} else {
					pid = parseInt(pid, 10);
					$.each(temp, function(k, v) {
						if (pid == v[c.pid[index - 1]]) {
							tdata.push(v);
						}
					});
				}
				return tdata;
			}

			function changeItem(evt) {
				var index = parseInt(getSub($(evt).attr(curTag), c.ids), 10);
				//在重新选择时要将当项以后的项都触发一次值改变事件？
				var curVal = evt.val();
				for (var i = index; i < c.ids.length; i++) {
					if (i + 1 < c.ids.length) {
						//console.log('事件区域循环:'+i);
						//获取下一项
						var t = getFitData(i + 1, curVal);
						curVal = -1;
						if (isNullorEmpty(t)) {
							curVal = t[0][c.val];
						}
						//curVal = typeof(t)==UNF?99999999:t[0][c.val];
						creatItem(t, i + 1, curVal);
					}
				}
			}

		};
	})(jQuery);

	/**
	 * 提示信息插件。
	 *
	 * @author 咏殇影@nbmxkj 20140530 适用范围：所有支持hover事件的html标签 参数： title : 提示信息内容
	 *         order ：<可选>设定该值后title参数无效，显示内容为本参数对应的标签内容。[#ID]或[.class] 示例：
	 *         $('a').nbmtip({title:'我是提示内容'}); or
	 *         $('a').nbmtip({order:'#calendar-tips'}); or
	 *         $('a').nbmtip({order:'.calendar-tips'});
	 *
	 */
	(function($) {
		$.fn.nbmtip = function(options) {

			/*
			 * console.logs('浏览器时下窗口可视区域高度'+$(window).height()); //浏览器时下窗口可视区域高度
			 * console.logs('浏览器时下窗口文档的高度'+$(document).height()); //浏览器时下窗口文档的高度
			 * console.logs('浏览器时下窗口文档body的高度'+$(document.body).height());//浏览器时下窗口文档body的高度
			 * console.logs('浏览器时下窗口文档body的总高度 包括border padding
			 * margin'+$(document.body).outerHeight(true));//浏览器时下窗口文档body的总高度
			 * 包括border padding margin
			 * console.logs('浏览器时下窗口可视区域宽度'+$(window).width()); //浏览器时下窗口可视区域宽度
			 * console.logs('浏览器时下窗口文档对于象宽度'+$(document).width());//浏览器时下窗口文档对于象宽度
			 * console.logs('浏览器时下窗口文档body的高度'+$(document.body).width());//浏览器时下窗口文档body的高度
			 * console.logs('浏览器时下窗口文档body的总宽度 包括border padding
			 * margin'+$(document.body).outerWidth(true));//浏览器时下窗口文档body的总宽度
			 * 包括border padding margin
			 *
			 * console.logs('获取滚动条到顶部的垂直高度'+$(document).scrollTop());
			 * //获取滚动条到顶部的垂直高度
			 * console.logs('获取滚动条到左边的垂直宽度'+$(document).scrollLeft());
			 * //获取滚动条到左边的垂直宽度
			 *
			 */
			var defaults = {
				title : '', // 显示内容
				order : '',// 指定标签 ID 或 Class
			};
			// 配置项
			var opts = $.extend(defaults, options)
			var content;
			$(this).hover(function() {
				create(this);
			}, function() {
				if ( typeof (content) != 'undefined') {
					content.hide();
				}
			});
			// 功能函数
			function create(obj) {
				var selWidth = $(obj).width();
				var offset = $(obj).offset();
				var right = offset.left + $(obj).width();
				var left = offset.left;
				var top = offset.top;
				var height = $(obj).height();
				var width = $(obj).width();

				var total_width = $(document).width();
				// $(obj).parent().width();//
				// 总宽度
				var total_heitht = $(document).height();
				// $(obj).parent().height();//
				// 总高度

				var cdheight = $(window).height();
				// 浏览器可视高度
				var scrollTop = $(document).scrollTop();
				if (opts.order != '') {
					content = $(opts.order);
					content.css({
						left : offset.left,
						top : offset.top + $(obj).height(),
						position : 'fixed',
					});
				} else {
					if ( typeof (content) == 'undefined') {
						content = $('<div></div>');
						content.text(opts.title)
						$(obj).after(content);
					}
					content.css({
						background : 'none repeat scroll 0 0 #FFFFFF',
						border : '1px solid #298CCE',
						overflow : 'hidden',
						width : 300,
						height : $(obj).height() * 2,
						left : offset.left,
						top : offset.top + $(obj).height(),
						position : 'fixed',
						display : 'none'
					});
				}
				content.css({
					'z-index' : 99999
				});
				var c_width = content.width();
				var c_height = content.height();

				if (total_width < (c_width + left)) {
					content.css({
						left : left - c_width + width
					});
				} else {
					content.css({
						left : left
					});
				}
				// 总高度 小于 当前标签距枯顶 + 显示标签高度
				if (total_heitht < (c_height + top)) {
					content.css({
						// top : (total_heitht - c_height - height)
						top : top - c_height - 3
					});
				} else {
					var curScorllTop = top - scrollTop;
					// 当前距可视区顶
					// 当前距可视区顶高度与自高大于可视区高，标签显示在左上
					if ((curScorllTop + height + c_height) >= cdheight) {
						content.css({
							top : (top - c_height - 3)
						});
					} else {
						content.css({
							top : top + height + 3
						});
					}
				}
				content.show();
			}

		};
	})(jQuery);

	/**
	 * tags标签插件。
	 *
	 * @author 咏殇影@nbmxkj 20140604 使用： 定义标签
	 *         <ul>
	 *         <li><input type="text" class="textInput" checkfor="MisMessage"
	 *         fileds="" inputName="recipient" chainname="recipientname"
	 *         emailName="email" /> </li>
	 *         </ul>
	 *
	 * var obj = '.textInput'; $(obj).tagsinput(); 参数说明：checkfor:数据查找类型【程序逻辑使用】
	 * fileds：指定弹出层显示字段，默认显示系统自定义 inputName：标识字段 chainname：标识字段 emailName：标识字段
	 */
	/*
	 *
	 * 示例： html页面部分：

	 <script>
	 function clearreceverMismessage(n, p) {
	 var l = $('#' + p + ' li:last');
	 $('#' + p + ' li:not(:last)').remove();
	 }
	 </script>
	 <div class="tml-form-row">
	 <label>
	 收件人
	 </label>
	 <div class="tml-input-append2">
	 <ul class="addressee left checkTo" id="Mismessage_add" style="width:80%;">
	 <li class="addresseeText">
	 <input type="text" style="float: left;" class="checkByInput addresseeTextInput textInput"
	 checkfor="MisMessage" inputName="recipient" chainname="recipientname" emailName="email"
	 />
	 </li>
	 </ul>
	 <a class="input-addon input-addon-addon input-addon-userplus
	 checkUser" href="javascript:;" ulid="Mismessage_add" data="recipientname,username,text;recipient,userid,hidden,1;email,email,hidden">
	 查找带回
	 </a>
	 <a href="javascript:void(0)" class="input-addon input-addon-recycle" title="清空接收用户"
	 onclick="clearreceverMismessage('1','Mismessage_add');">
	 清除
	 </a>
	 </div>
	 </div>

	 程序模板：Tpl/default/CheckFor/check.html 修改后内容见下方：
	 <!-- 模板开始 -->
	 <div id="checkfor">
	 <style>
	 #checkfor{border:1px solid #95B8E7;position:absolute;background:#fff;text-align:center;z-index:9999 !important}
	 #checkfor .current{background:#fbec88}
	 #checkfor td{border-right:1px dotted#ccc;border-bottom:1px dotted#ccc;cursor:pointer;min-width:70px;padding:4px 2px}
	 #checkfor thead{background:#efefef}
	 </style>
	 <empty name="notfound">
	 <div>
	 <table border="0" cellspacing="0" id="checkForTable">
	 <thead>
	 <tr>
	 <volist name="fields" id="n" key="k">
	 <td<eq name="n" value="0">
	 style="display:none;"
	 </eq>
	 >{$n}
	 </td>
	 </volist>
	 </tr>
	 </thead>
	 <tbody>
	 <volist name="checklist" id="l" key="k">
	 <tr<eq name="k" value="1">
	 class="current"
	 </eq>
	 >
	 <volist name="fields" id="f" key="k2">
	 <td class="{$key}" <eq name="f" value="0">
	 style="display:none;"
	 </eq>
	 >{$l[$key]}
	 </td>
	 </volist>
	 </tr>
	 </volist>
	 </tbody>
	 </table>
	 </div>
	 <else/>
	 {$notfound}
	 </empty>
	 </div>
	 <!-- 模板结束 -->
	 */

	;
	(function($) {
		$.fn.tagsinput = function() {
			var tagsId = 'checkfor';
			// 给每个对象绑定事件
			$.each($(this), function() {
				var _this = $(this);
				_this.unbind();
				init(_this);

			});

			$('body').bind('click', function() {
				close();
			});
			// 非正常情况下关闭显示数据

			//
			// checkfro 属性： 【只需传】
			// iswrite：输入结果查询为空时时否保存
			// checkfor：提交到的action名称 【只需传】
			// show:显示字段 【只需传】
			// litmit:查询条数 【只需传】
			// order:排序方式 【只需传】
			// map: 查询条件 【只需传】
			// fields:数据检索字段 【只需传】
			// other:其它条件
			// m:MODEL 【只需传】
			// appendurl:附件 【只需传】
			// callback:回调函数
			// insert:被抓取数据的字段

			function init(_this) {
				_this.attr('autocomplete', 'off');
				// ////////////////
				var iswrite = _this.attr('iswrite');
				var insert = _this.attr('insert') == '' ? 'id' : _this.attr('insert');
				var show = _this.attr('show') == '' ? 'name' : _this.attr('show');
				// /////////////
				var callback = _this.attr('callback');

				var real = _this.siblings('input[type="hidden"]');
				var tr = _this.find('tbody tr.current');
				//_this.parent().css('zIndex', '10');

				var last;
				_this.bind('keyup', function(e) {
					e.preventDefault();
					if (e.keyCode != 37 && e.keyCode != 38 && e.keyCode != 39 && e.keyCode != 40 && e.keyCode != 13 && e.keyCode != 27) {
						if (e.type != 'dblclick' && _this.val() == '') {// 清空文本行为不查询
							// 不是双击的时候不查询
							$('#checkfor').remove();
							_this.next().val('');
							return false;
						}
						last = e.timeStamp;
						setTimeout(function() {
							if (last - e.timeStamp == 0) {
								getData(_this.val(), _this);
							}
						}, 1000);

					}
				});

				if ($.browser.mozilla) {
					_this.bind('keypress', function(e) {
						bindValue(e, _this);
					});
				} else {
					_this.bind('keydown', function(e) {
						bindValue(e, _this);
					});
				}
			}

			function bindValue(e, obj) {
				_this = obj || _this;
				// clear();
				e.stopPropagation();
				var key = (e.keyCode) || (e.which) || (e.charCode);
				// 兼容IE(e.keyCode)和Firefox(e.which)
				var tr = $('#checkfor tbody tr.current');
				switch (key) {
					case 38:
						// 上
						if (tr.prev().length) {
							tr.removeClass('current');
							tr.prev().addClass('current');
							autoScroll(tr.prev(), this);
						}
						break;
					case 40:
						// 下
						if (tr.next().length) {
							tr.removeClass('current');
							tr.next().addClass('current');
							autoScroll(tr.next(), this);
						}
						break;
					case 13:
						// 回车
						e.preventDefault();
						// _this.unbind();
						tr.trigger('click');
						// init(_this);
						break;
					case 27:
						// ESC
						close();
						clear(_this);
						break;
					case 8:
						// 删除
						// var d = new Date();
						if (_this.val() == '') {
							// 删光了文本框中的值。就移除已成tag的项
							// 找出当前对象的父节点Ul下的li 不为最后一个子节点
							var temp = _this.closest('ul').find('li:not(.addresseeText)');
							temp.last('li').remove();
							close();
						}

						break;
					case 27:
						// ESC关闭
						close();
						break;
				}

			}

			function getData(val, _this) {
				var checkfor = _this.attr('checkfor');
				var limit = _this.attr('litmit');
				var order = _this.attr('order');
				var map = _this.attr('map');
				var newconditions = _this.attr('newconditions');
				var fields = _this.attr('fields');
				var other = _this.attr('other');
				var m = _this.attr("m");
				// 当前模型
				var appendurl = _this.attr('appendurl');
				var url = TP_APP + '/CheckFor/check';
				var callback = _this.attr('callback');
				var iswrite = isNullorEmpty(_this.attr('iswrite')) ? true : false;
				// 如果存在附件URL 这加入url中
				if (appendurl) {
					url = url + "/" + appendurl + '/accesstype/plugs';
				}

				$.ajax({
					type : "POST",
					url : url,
					data : {
						m : m,
						other : other,
						fields : fields,
						map : map,
						newconditions : newconditions,
						order : order,
						limit : limit,
						checkfor : checkfor,
						con : val
					},
					async : true,
					success : function(msg) {
						var con = $(msg);
						close();

						$('body').append(con);
						var scrollHeight = 18;
						var pos = _this.offset();
						var w = $(window);
						var c = $('#' + tagsId);
						var cheight = c.outerHeight(true) + scrollHeight > 200 ? 233 : (c.outerHeight(true) + scrollHeight);
						var cwidth = c.outerWidth(true);
						var overflow_width = pos.left + cwidth - w.width();
						// > 0 溢出宽度
						var overflow_height = pos.top + cheight - w.height();
						// > 0 溢出高度

						var left = overflow_width > 0 ? pos.left - cwidth + _this.outerWidth() : pos.left;
						var top = overflow_height > 0 ? pos.top - cheight : pos.top + _this.outerHeight();

						con.css({
							left : left,
							top : top
						});
						if ($('table', con).height() + scrollHeight > 200) {
							con.css({
								overflow : 'scroll',
								height : 233
							});
						}
						if (iswrite == false) {
							if ($('#' + tagsId + ' table').length == 0) {
								clear(_this);
							}
						}

						if (callback != '' && callback != undefined) {
							_this.one('callback', function(event, data) {
								window[callback](data, _this);
							});
						}

						$('#' + tagsId + ' tbody tr').mouseover(function() {
							tr = $(this);
							tr.addClass('current').siblings('.current').removeClass('current');
						});

						$('#' + tagsId + ' tbody > tr').click(function() {

							setRealData(true, _this);
							close();
						});

						if ($('#' + tagsId + ' tbody > tr').length == 1) {
							var show = isNullorEmpty(_this.attr('show')) ? _this.attr('show') : 'name';
							var tr = $('#' + tagsId + ' tbody tr.current');
							var val = tr.find('.' + show).text();
							var val = tr.find('.' + show).text();
							if (_this.val() == val) {
								tr.trigger('click');

							}
						}

					},
					global : false
				});
			}

			/**
			 * 设置所有相关的值
			 *
			 * @param isConfirm
			 */
			function setRealData(isConfirm, obj) {
				_this = obj || _this;

				var iswrite = isNullorEmpty(_this.attr('iswrite')) ? false : true;
				var insert = isNullorEmpty(_this.attr('insert')) ? _this.attr('insert') : 'id';

				var show = isNullorEmpty(_this.attr('show')) ? _this.attr('show') : 'name';

				var tbody = $('#' + tagsId + ' tbody');

				var other = tbody.attr('other');
				var callback = _this.attr('callback');

				var tr = $('#' + tagsId + ' tbody tr.current');
				var realdata = tr.find('.' + insert).text();
				var val = tr.find('.' + show).text();
				var real = _this.siblings('input[type="hidden"]');
				_this.prev('[auto="1"]').val(val);
				// for IE8
				_this.val(val).focus();
				real.val(realdata);
				/* 假如选择值的同时有回调函数，则执行 */
				if (isConfirm) {
					other && setOther(false, _this, tr);

					if (callback) {
						var tds = tr.children();
						var count = tds.length;
						var td, id, data;
						var callbackData = {
							show : val,
							insert : realdata,
							theInput : _this,
							callbacktype : 'checkfor'
						};

						for (var i = 0; i < count; i++) {
							td = $(tds[i]);
							id = td.attr('class');
							data = td.text();
							callbackData[id] = data;

							if (count == i + 1) {
								evalCallback(callbackData);
							}
						}
					}
				}
			}

			function searchNearbyNode(theInput, id, data) {
				var parent = theInput.parent();
				var node = parent.find('*[check_key="' + id + '"]');
				if (parent.get(0).nodeName == 'FORM' || node.length > 0) {
					node.val(data);
					if (node.length > 0 && node.get(0).nodeName == "SELECT") {/* 判断是否为select */
						var name = node.attr('name');
						var aNode = parent.find('a[name="' + name + '"]');
						aNode.text(node.children(':selected').text());
						var lis = $('#op_' + node.parent().attr('id') + ' li');
						//console.log(lis)
						lis.find('.selected').removeClass('selected');
						lis.find('[value="' + data + '"]').addClass('selected');
					}
				} else {
					arguments.callee(parent, id, data);
				}
			}

			//设置附带的值
			function setOther(isSetEmpty, theInput, tr) {
				checkforInput = theInput || checkforInput;
				$.each(other, function(i, v) {
					var data = isSetEmpty ? '' : tr.find('.' + v).text();
					//tr.children('.'+other[id]).text();
					searchNearbyNode(checkforInput, v, data);
				});
				/*for(var id in other){
				 var data = isSetEmpty ? '' : tr.find('.' + other[id]).text();//tr.children('.'+other[id]).text();
				 $(this).logs('data:'+data+'  __:'+other[id]);
				 searchNearbyNode(checkforInput, id, data);
				 }*/
			}

			function evalCallback(data) {
				try {
					_this.trigger('callback', [data]);
					_this.unbind('callback');
				} catch (e) {
					$(this).logs(e.toString());
				}
			}

			function clear(_this) {
				var real = _this.siblings('input[type="hidden"]');
				real.val('');
				_this.val('');
			}

			function close() {
				$('#' + tagsId).remove();
			}

			function autoScroll(tr, obj) {
				tagsObj = $('#' + tagsId);
				var scrollTop = tagsObj.scrollTop();
				var top = tr.position().top;
				var hei = tagsObj.outerHeight(true);
				if (top + 27 > hei) {
					tagsObj.scrollTop(scrollTop + 54);
				} else if (top - 27 < 0) {
					tagsObj.scrollTop(scrollTop - 27);
				}
			}

		}
	})(jQuery);

	(function($) {
		$.fn.tagsinputnew = function() {
			var tagsId = 'checkfor';
			// 给每个对象绑定事件
			$.each($(this), function() {
				var _this = $(this);
				_this.unbind();
				init(_this);

			});

			// 非正常情况下关闭显示数据

			//
			// checkfro 属性： 【只需传】
			// iswrite：输入结果查询为空时时否保存
			// checkfor：提交到的action名称 【只需传】
			// show:显示字段 【只需传】
			// litmit:查询条数 【只需传】
			// order:排序方式 【只需传】
			// map: 查询条件 【只需传】
			// fields:数据检索字段 【只需传】
			// other:其它条件
			// m:MODEL 【只需传】
			// appendurl:附件 【只需传】
			// callback:回调函数
			// insert:被抓取数据的字段

			function init(_this) {
				_this.attr('autocomplete', 'off');
				_this.attr('readonly', false);
				// ////////////////
				var iswrite = _this.attr('iswrite');
				var insert = _this.attr('insert') == '' ? 'id' : _this.attr('insert');
				var show = _this.attr('show') == '' ? 'name' : _this.attr('show');
				// /////////////
				var callback = _this.attr('callback');

				var real = _this.siblings('input[type="hidden"]');
				var tr = _this.find('tbody tr.current');
				//_this.parent().css('zIndex', '10');

				var last;
				
				$('body,a,select').bind('click', function() {
					if(_this.siblings("input[type='hidden']").val()==""){
						_this.val("");
					}
					close();
				});
				
				_this.bind('keyup', function(e) {
					e.preventDefault();
					if (e.ctrlKey == 1) {
						if (document.all) {
							k = e.keyCode;
						} else {
							k = e.which;
						}
						if (k == 67) {//按下ctrl+c时
							return false;
						}
					}
					if (e.keyCode != 37 && e.keyCode != 38 && e.keyCode != 39 && e.keyCode != 40 && e.keyCode != 13 && e.keyCode != 27 && e.keyCode != 17) {
						if (e.type != 'dblclick' && _this.val() == '') {// 清空文本行为不查询
							// 不是双击的时候不查询
							$('#checkfor').remove();
							_this.next().val('');
							return false;
						}
						last = e.timeStamp;
						setTimeout(function() {
							if (last - e.timeStamp == 0) {
								getData(_this.val(), _this);
							}
						}, 1000);

					}
				});
				
//				_this.bind('focus', function(e) {
//					e.preventDefault();
//					if (_this.val() == "") {
//						last = e.timeStamp;
//						setTimeout(function() {
//							if (last - e.timeStamp == 0) {
//								getData(_this.val(), _this);
//							}
//						}, 1000);
//					}
//				});

				if ($.browser.mozilla) {
					_this.bind('keypress', function(e) {
						bindValue(e, _this);
					});
				} else {
					_this.bind('keydown', function(e) {
						bindValue(e, _this);
					});
				}
			}

			function bindValue(e, obj) {
				_this = obj || _this;
				// clear();
				e.stopPropagation();
				var key = (e.keyCode) || (e.which) || (e.charCode);
				// 兼容IE(e.keyCode)和Firefox(e.which)
				var tr = $('#checkfor tbody tr.current');
				switch (key) {
					case 38:
						// 上
						if (tr.prev().length) {
							tr.removeClass('current');
							tr.prev().addClass('current');
							autoScroll(tr.prev(), this);
						}
						break;
					case 40:
						// 下
						if (tr.next().length) {
							tr.removeClass('current');
							tr.next().addClass('current');
							autoScroll(tr.next(), this);
						}
						break;
					case 13:
						// 回车
						e.preventDefault();
						// _this.unbind();
						tr.trigger('click');
						// init(_this);
						break;
					case 27:
						// ESC
						close();
						clear(_this);
						break;
					case 8:
						// 删除
						// var d = new Date();
						if (_this.val() == '') {
							// 删光了文本框中的值。就移除已成tag的项
							// 找出当前对象的父节点Ul下的li 不为最后一个子节点
							var temp = _this.closest('ul').find('li:not(.addresseeText)');
							temp.last('li').remove();
							close();
						}

						break;
					case 27:
						// ESC关闭
						close();
						break;
				}

			}

			function getData(val, _this) {
				_this.siblings("input[type='hidden']").val("");//清空隐藏域值
				var data = "viewtype=checkfor&qkeysword="+val+"&quicksearchby=quickall";
				var param = _this.siblings("a[lookupgroup]").attr('param');
				var a_url = _this.siblings("a[lookupgroup]").attr('href');
				// 当前模型
				var appendurl = _this.attr('appendurl');
				var url = a_url?a_url:TP_URL + '/lookupGenerals';
				var callback = _this.attr('callback');
				var iswrite = isNullorEmpty(_this.attr('iswrite')) ? true : false;
				// 如果存在附件URL 这加入url中
				if (appendurl) {
					url = url + "/" + appendurl + '/accesstype/plugs';
				}
				if(param){
					data += "&"+param;
				}
				_this.addClass("input_loading");
				_this.removeClass("focus");
				$.ajax({
					type : "POST",
					url : url,
					data : data,
					async : true,
					success : function(msg) {
						var con = $(msg);
						close();
						_this.removeClass("input_loading");
						$('body').append(con);
						var scrollHeight = 18;
						var pos = _this.offset();
						var w = $(window);
						var c = $('#' + tagsId);
						var cheight = c.outerHeight(true) + scrollHeight > 200 ? 233 : (c.outerHeight(true) + scrollHeight);
						var cwidth = c.outerWidth(true);
						var overflow_width = pos.left + cwidth - w.width();
						// > 0 溢出宽度
						var overflow_height = pos.top + cheight - w.height();
						// > 0 溢出高度
						var left = overflow_width > 0 ? (cwidth-_this.outerWidth())/2 : pos.left;
						var top = overflow_height > 0 ? pos.top - c.outerHeight(true) : pos.top + _this.outerHeight();

						con.css({
							left : left,
							top : top
						});
						if ($('table', con).height() + scrollHeight > 200) {
							con.css({
								overflow : 'scroll',
								height : 233
							});
						}
						if (iswrite == false) {
							if ($('#' + tagsId + ' table').length == 0) {
								clear(_this);
							}
						}

						if (callback != '' && callback != undefined) {
							_this.one('callback', function(event, data) {
								window[callback](data, _this);
							});
						}

						$('#' + tagsId + ' tbody tr').mouseover(function() {
							tr = $(this);
							tr.addClass('current').siblings('.current').removeClass('current');
						});

						$('#' + tagsId + ' tbody > tr').click(function() {

							setRealData($(this),_this);
							close();
						});

						if ($('#' + tagsId + ' tbody > tr').length == 1) {
							var show = isNullorEmpty(_this.attr('show')) ? _this.attr('show') : 'name';
							var tr = $('#' + tagsId + ' tbody tr.current');
							var val = tr.find('.' + show).text();
							var val = tr.find('.' + show).text();
							if (_this.val() == val) {
								tr.trigger('click');

							}
						}

					},
					global : false
				});
			}

			/**
			 * 设置所有相关的值
			 *
			 * @param isConfirm
			 */
			function setRealData(obj, _this) {
				var lookupname = _this.siblings("a[lookupgroup]").attr("lookupgroup");
				var this_data = obj.attr("rel_data");
				try{
					this_data = this_data?$.parseJSON(this_data):"";
					if(this_data){
						for(var key in this_data){
							$("[class*='"+lookupname+"."+key+"']").val(this_data[key]);
						};
					}
				}catch(err){
					connsole.warn(err.message);
				}
			}

			function searchNearbyNode(theInput, id, data) {
				var parent = theInput.parent();
				var node = parent.find('*[check_key="' + id + '"]');
				if (parent.get(0).nodeName == 'FORM' || node.length > 0) {
					node.val(data);
					if (node.length > 0 && node.get(0).nodeName == "SELECT") {/* 判断是否为select */
						var name = node.attr('name');
						var aNode = parent.find('a[name="' + name + '"]');
						aNode.text(node.children(':selected').text());
						var lis = $('#op_' + node.parent().attr('id') + ' li');
						//console.log(lis)
						lis.find('.selected').removeClass('selected');
						lis.find('[value="' + data + '"]').addClass('selected');
					}
				} else {
					arguments.callee(parent, id, data);
				}
			}

			//设置附带的值
			function setOther(isSetEmpty, theInput, tr) {
				checkforInput = theInput || checkforInput;
				$.each(other, function(i, v) {
					var data = isSetEmpty ? '' : tr.find('.' + v).text();
					searchNearbyNode(checkforInput, v, data);
				});
			}

			function evalCallback(data) {
				try {
					_this.trigger('callback', [data]);
					_this.unbind('callback');
				} catch (e) {
					$(this).logs(e.toString());
				}
			}

			function clear(_this) {
				var real = _this.siblings('input[type="hidden"]');
				real.val('');
				_this.val('');
			}

			function close() {
				$('#' + tagsId).remove();
			}

			function autoScroll(tr, obj) {
				tagsObj = $('#' + tagsId);
				var scrollTop = tagsObj.scrollTop();
				var top = tr.position().top;
				var hei = tagsObj.outerHeight(true);
				if (top + 27 > hei) {
					tagsObj.scrollTop(scrollTop + 54);
				} else if (top - 27 < 0) {
					tagsObj.scrollTop(scrollTop - 27);
				}
			}

		}
	})(jQuery);
	
	/**
	 * 菜单插件。 {addonly:'当前节点ID值，<= 0 为空根节点', left: top:
	 * havechild:boolean[true:有子节点，false:无子节点]}
	 *
	 */
	(function($) {
		$.extend({
			nbmMenu : function(options) {
				var opts = $.extend({
					'addonly' : 1,
					'left' : 80,
					'top' : 80,
					'havechild' : true
				}, options);

				var html = "";
				var title = '添加同级节点';
				if (true == opts.havechild) {
					title = '添加子节点';
				}
				if (parseInt(opts.addonly) <= 0) {
					html = '<div id="nbmMenu" classs="contextmenu" style="left: ' + opts.left + 'px; top: ' + opts.top + 'px;position: absolute;z-index: 1500;"><ul>' + '<li rel="addNode">添加节点</li>' + '</ul></div>';
				} else {
					html = '<div id="nbmMenu" classs="contextmenu" style="left: ' + opts.left + 'px; top: ' + opts.top + 'px;position: absolute;z-index: 1500;"><ul>' + '<li rel="addNode">' + title + '</li>' + '<li rel="modifyNode">修改节点</li>' + '<li rel="deleteNode">删除节点</li>' + '</ul></div>';
				}
				$('body').append(html);
				$('#nbmMenu').css({
					left : opts.left,
					top : opts.top
				});
				$('#nbmMenu ul').css({
					'background-color' : '#fff',
					'border' : '1px solid #999',
					'list-style' : 'none outside none',
					'margin' : 0,
					'padding' : 1,
					'width' : 150
				});
				$('#nbmMenu ul li').css({
					'background-color' : 'transparent',
					'border' : '1px solid #fff',
					'color' : '#000',
					'cursor' : 'default',
					'display' : 'block',
					'margin' : 0,
					'padding' : 3,
					'text-align' : 'left'
				});
				$('#nbmMenu ul li').hover(function() {
					$(this).css({
						'background-color' : '#b6bdd2',
						'border' : '1px solid #0a246a'
					})
				}, function() {
					$(this).css({
						'background-color' : '',
						'border' : ''
					});
				});
				$('#nbmMenu').mouseleave(function() {
					$('#nbmMenu').remove();
				});
				$('#nbmMenu li').click(function() {
					isNullorEmpty($(this).attr('rel')) ? checkItem($(this)) : '';
				});

				function checkItem(obj) {
					var rel = $(obj).attr('rel');
					if (isNullorEmpty(opts[rel])) {
						opts[rel].call(this, obj);
						// eval(opts[rel]+'('+obj+')');
					}
				}

			}
		});
	})(jQuery);

	/**
	 * 数字转换为中文
	 *
	 * @parame obj 数据来源对象
	 * @parame number 手动指定的数字
	 * @parame dw 单位列表
	 * @parame zf 对应中文列表
	 * @parame dwC 单位容器
	 * @parame zfC 字符容器
	 * @description 数据来源对象(obj)为空时就找 手动指定的数字 (number)若都为空返回空。
	 *              单位需从小到大指定。单位前两项为最小单位，对应取得数字中【.】号后的前两位，其余部分舍弃。
	 *              单位容器、字符容器都必须成对写书html标签。
	 * @example var ret = $.numberRecover({number:123.521,'dwC':'<a></a>','zfC':'<b style="color:red"></b>'})
	 */
	(function($) {
		$.extend({
			numberRecover : function(options) {
				var defaults = {
					obj : '',
					number : '',
					dw : ['分', '角', '元', '拾', '佰', '仟', '万', '十', '百', '千', '亿'],
					zf : ['零', '壹', '贰', '叁', '肆', '伍', '陆', '柒', '捌', '玖'],
					dwC : '<span style="color:red"></span>',
					zfC : '<span style="color:black"></span>'
				};
				var opts = $.extend(defaults, options);
				var val = '';
				if (isNullorEmpty(opts.obj)) {
					val = $(opts.obj).val();
				} else {
					if (isNullorEmpty(opts.number)) {
						val = opts.number;
					} else {
						return;
					}
				}
				var allVal = val.split('.');
				var ret = allVal[0].split('');
				// 整数

				var zfCTag = $(opts.dwC);
				var dwCTag = $(opts.zfC);

				zfPro = (zfCTag.attr('style') ? (' style="' + zfCTag.attr('style') + '"') : '') + (zfCTag.attr('class') ? (' class="' + zfCTag.attr('class') + '"') : '');
				dwPro = (dwCTag.attr('style') ? (' style="' + dwCTag.attr('style') + '"') : '') + (dwCTag.attr('class') ? (' class="' + dwCTag.attr('class') + '"') : '');
				var res = '';
				for (var i = 0; i < ret.length; i++) {

					res += '<' + zfCTag[0].tagName + zfPro + '>' + opts.zf[ret[i]] + '</' + zfCTag[0].tagName + '>' + '<' + dwCTag[0].tagName + dwPro + '>' + opts.dw[ret.length - i + 1] + '</' + dwCTag[0].tagName + '>';
				}
				if (allVal[1] != '' && allVal[1] != undefined) {
					var sret = allVal[1].split('');
					// 小数
					var length = sret.length > 2 ? 2 : sret.length;
					for (var i = 0; i < length; i++) {
						res += '<' + zfCTag[0].tagName + zfPro + '>' + opts.zf[sret[i]] + '</' + zfCTag[0].tagName + '>' + '<' + dwCTag[0].tagName + dwPro + '>' + opts.dw[2 - i - 1] + '</' + dwCTag[0].tagName + '>';

					}

				}
				return res;

			}
		});
	})(jQuery);

	(function($) {
		$.extend({
			calculation : function(options) {
				var op = $.extend({
					selecter : '',
					totaler : ''
				}, options);
				$(op.selecter).keyup(function() {
					var totalObj = $(op.totaler);

					var total = 0;
					$(op.selecter).each(function() {
						total += isNullorEmpty($(this).val()) ? parseInt($(this).val()) : 0;
					});

					totalObj.val(total);
				});
			},
			calculationAll : function(options) {
				var op = $.extend({
					selecter : '',
					totaler : ''
				}, options);
				var totalObj = $(op.totaler);
				var total = 0;
				$(op.selecter).each(function() {
					total += isNullorEmpty($(this).val()) ? parseInt($(this).val()) : 0;
				});
				totalObj.val(total);
			}
		});
	})(jQuery);
	/**
	 * 遮罩层 参数： iWidth： 显示区域宽， iHeight： 显示区域高 iContent： 用户自定义显示内容 使用示例： var html ='<div
	 * style="width:100%;height:100%">sss</div>'; $.overLay(150,200,html);
	 */
	(function($) {
		$.extend({
			overLay : function(iWidth, iHeight, iContent) {
				/*
				* alert($(window).height()); //浏览器当前窗口可视区域高度
				* alert($(document).height()); //浏览器当前窗口文档的高度
				* alert($(document.body).height());//浏览器当前窗口文档body的高度
				* alert($(document.body).outerHeight(true));//浏览器当前窗口文档body的总高度
				* 包括border padding margin alert($(window).width()); //浏览器当前窗口可视区域宽度
				* alert($(document).width());//浏览器当前窗口文档对象宽度
				* alert($(document.body).width());//浏览器当前窗口文档body的高度
				* alert($(document.body).outerWidth(true));//浏览器当前窗口文档body的总宽度
				* 包括border padding margin
				*/
				// 浏览器宽底
				screenwidth = $(window).width();
				// 浏览器高度
				screenheight = $(window).height();
				// 获取滚动条距顶部的偏移
				mytop = $(document).scrollTop();
				// 计算弹出层的left
				getPosLeft = (screenwidth - iWidth) / 2;
				// 计算弹出层的top
				getPosTop = (screenheight - iHeight) / 2;
				var obj = $('body');
				/*
				 * obj.css( { margin : 0, padding : 0, "overflow":"hidden" });
				 */
				var parentHeight = obj.height() < $(window).height() ? $(window).height() : obj.height();
				// var parentHeight =$(window).height();
				/**
				 * 创建遮罩层底层
				 */
				var content = $('<div></div>');
				content.attr('id', "nbm_mask_cover");
				content.css({
					border : '0px red solid',
					width : '100%', // obj.width(),
					height : parentHeight,
					background : '#006699',
					margin : '0px',
					padding : '0px',
					opacity : '0.5',
					top : 0,
					left : 0,
					position : 'absolute'
				});
				//				obj.append(content);// 写入底层
				/**
				 * 创建内容层
				 */
				var customer = $('<div></div>');
				customer.attr('id', 'nbm_mask_content');
				var customerTop = (parseInt($(window).height()) - iHeight) / 2;
				var customerLeft = (parseInt(content.width()) - iWidth) / 2;
				customer.css({
					width : iWidth,
					height : iHeight,
					background : '#fff',
					margin : '0px',
					padding : '0px',
					opacity : '1',
					'z-index' : '25',
					top : getPosTop + mytop,
					left : getPosLeft,
					position : 'absolute'
				});
				// $('#nbm_mask_cover')
				// 2013 06 19 修改
				content.append(customer);
				//将内容层写入底层容器
				//obj.append(content);// 写入底层
				//obj.append(customer);// 写入内容层  备份代码
				//end
				var closeButton = $('<a id="closeButton">X</a>');
				closeButton.attr('href', 'javascript:void(0)');
				closeButton.css({
					color : '#f0f',
					width : '20px',
					height : '20px',
					'line-height' : '20px',
					background : '#fff',
					'text-align' : 'center',
					margin : '0px',
					'margin-left' : iWidth,
					padding : '0px',
					opacity : '1',
					'z-index' : '28',
					top : getPosTop + mytop,
					left : getPosLeft,
					position : 'absolute'
				});
				$(closeButton).click(function() {
					$('#nbm_mask_cover').remove();
					$('#nbm_mask_content').remove();
					$(this).remove();
					$(iContent).remove();
					obj.removeAttr("style");
				});
				// $('#nbm_mask_content')
				content.append(closeButton);

				obj.append(content);

				// 2013 06 19 修改
				//	content.append(content);//将内容层写入底层容器
				//obj.append(content);// 写入底层

				//obj.append(closeButton);写入内容层  备份代码
				//end

				// 在内容层中写入用户自定义内容
				$('#nbm_mask_content').append(iContent);

				// 当浏览器窗口大小改变时
				$(window).resize(function() {
					screenwidth = $(window).width();
					screenheight = $(window).height();
					mytop = $(document).scrollTop();
					getPosLeft = (screenwidth - iWidth) / 2;
					getPosTop = (screenheight - iHeight) / 2;

					$("#nbm_mask_content").css({
						"left" : getPosLeft,
						"top" : getPosTop + mytop
					});
					$('#closeButton').css({
						"left" : getPosLeft,
						"top" : getPosTop + mytop
					});
				});
				// 当拉动滚动条时，弹出层跟着移动
				$(window).scroll(function() {
					screenwidth = $(window).width();
					screenheight = $(window).height();
					mytop = $(document).scrollTop();
					getPosLeft = (screenwidth - iWidth) / 2;
					getPosTop = (screenheight - iHeight) / 2;
					$("#nbm_mask_content").css({
						"left" : getPosLeft,
						"top" : getPosTop + mytop
					});

					$('#closeButton').css({
						"left" : getPosLeft,
						"top" : getPosTop + mytop
					});

				});
			}
		});
	})(jQuery);

	/**
	 * 折叠菜单项
	 *
	 * @parame spread 全关全开控制，默认0：全关
	 * @parame selecter 打开指定项下标。默认-1，
	 * @parame open 展开的样式效果
	 * @parame close 关闭样式效果
	 * @description 折叠菜单项，目前只有纵向。
	 * @example ：
	 *			<div class="nbmaccordion"  data-option="spread:1;close:icon-double-angle-down;open:icon-double-angle-up">
	 *				<div title="我是标题，显示标题">我是展示内容</div>
	 *				........
	 *			</div>
	 */
	(function($) {
		$.fn.extend({
			/**
			 * 折叠菜单项，目前只有纵向
			 */
			nbmaccordion : function() {
				var CCL = 'nbm_panel';
				var defaults = {
					'spread' : '0',
					'selecter' : '0',
					'open' : '',
					'close' : ''
				};
				//默认属性设置
				//var c = $.extend(defaults, option); // 将用户设置属性覆盖默认属性
				/* 生成结构	panel-head 头
				 panel-title	显示标题
				 panel-icon	图标预留
				 panel-tool	操作按钮
				 panel-body 身
				 */
				var tempHeight = 0;
				$(this).each(function() {
					// spread:是否全关闭
					//selecter:指定展开项
					//open:展开的样式效果
					//close:闭合的样式效果

					// 获取组件属性
					var options = new Object();
					var opt = $(this).data('option');
					var temp1 = opt.split(';');
					for (var i in temp1) {
						var temp = temp1[i].split(':');
						options[temp[0].replace(/"([^"]*)"/g, "$1").replace(/"([^']*)"/g, "$1")] = temp[1].replace(/"([^"]*)"/g, "$1").replace(/"([^']*)"/g, "$1");
					}
					var c = $.extend(defaults, options);

					var _pthis = $(this);
					// 每个accordion 面板
					var tempObj = $(this).clone();
					// 克隆当前对象
					_pthis.html('');
					// 将当前对象清空

					// 当前容器总高度 layoutH
					var $this = $(this);
					$refBox = $this.parents("div.layoutBox:first");
					var iRefH = $refBox.height();
					var iLayoutH = parseInt($this.attr("layoutH"));
					var iH = iRefH - iLayoutH > 50 ? iRefH - iLayoutH : 50;

					var CCH = $(this).outerHeight(true) || iH;
					var items;
					$('>div', tempObj).each(function() {// 面板中的每一个div项
						items = $('<div class="' + CCL + '"></div>');
						var title = $(this).attr('title');
						var icon = c.icon;

						var headDiv = $('<div class="nbm_panel-head"></div>');
						// 定义标题头
						var titleDiv = $('<span class="nbm_panel-title"></span>');
						var iconDiv = $('<span class="nbm_panel-icon"></span>');
						var toolDiv = $('<span class="nbm_panel-tool"></span>');

						titleDiv.text(title);
						iconDiv.addClass(icon);

						headDiv.append(iconDiv).append(titleDiv).append(toolDiv);
						var bodyDiv = $('<div class="nbm_panel-body"></div>');
						bodyDiv.append($(this).html());

						items.append(headDiv).append(bodyDiv);
						_pthis.append(items);
						$(bodyDiv).attr('height', $(bodyDiv).outerHeight(true));
						var CIH = $(headDiv).outerHeight(true);
						// 当前项头高度
						$(headDiv).attr('height', CIH);
						//$(this).logs('当前项头高度'+CIH);

						if (c.spread == 0) {// 是否隐藏所有项
							bodyDiv.height('0');
							toolDiv.removeClass(c.open).addClass(c.close);
						} else {
							toolDiv.removeClass(c.close).addClass(c.open);
						}
						headDiv.bind('click', function() {

							//$(this).next('div.panel-body').show();
							$(this).stop();
							var p = $(this).closest('div.' + CCL);
							var toolObj = p.find('div.nbm_panel-head>span.nbm_panel-tool');

							// 先取得总选择卡高度与显示内容高度
							var tempCH = 0;
							p.find('div.nbm_panel-head').each(function() {
								tempCH += parseInt($(this).attr('height'), 10);
							});
							var height = p.find('div.nbm_panel-body').attr('height');
							tempCH += parseInt(height, 10);
							if (tempCH >= CCH) {
								$(this).closest('div.nbmaccordion').css({
									'height' : CCH
								}).addClass('scorll');
							}
							$(this).attr('class');
							if (p.find('div.nbm_panel-body').height()) {
								toolObj.removeClass(c.open).addClass(c.close);
								p.find('div.nbm_panel-body').animate({
									height : "0px"
								});
							} else {
								toolObj.removeClass(c.close).addClass(c.open);
								p.find('div.nbm_panel-body').animate({
									'height' : height + "px"
								});
							}

							//$(this).logs(height);

							p.siblings().each(function() {
								$(this).find('div.nbm_panel-body').animate({
									'height' : "0px"
								});
								//.hide();
								$(this).find('div.nbm_panel-head>span.nbm_panel-tool').removeClass(c.open).addClass(c.close);
							});

							//p.find('div.panel-body').is(":visible")?p.find('div.panel-body').hide():p.find('div.panel-body').show();
							//p.find('div.panel-body').is(":visible")?p.find('div.panel-body').animate({height:"0px"}).hide().height(height):p.find('div.panel-body').animate({height:height+"px"}).show();
						});
					});
					// 单个收缩项
					var tempCH = 0;
					$(this).find('div.nbm_panel-head').each(function() {
						tempCH += parseInt($(this).attr('height'), 10);
					});
					if (tempCH >= CCH) {
						$(this).css({
							'height' : CCH,
							'overflow-y' : 'auto'
						});
					}
					if (c.selecter > -1) {
						var curObj = _pthis.children().eq(c.selecter).find('div.nbm_panel-body');
						curObj.height(parseInt(curObj.attr('height'), 10));
					}
				});
			}
		});
	})(jQuery);
	(function($){
		$.fn.extend({
			dropback : function(){
				// 当前对象
				var _this = this;
				// 唯一标识
				var tag = 'dropbackkey';
				// 查找标识
				var searchTag = 'dropback';
				// 当前项的唯一标识值
				var curTag='';
				var box = _this.closest('form');
				_this.each(function(){
					$(this).change(function(){
						/*
						 *  触发对象来源数据整理，这步可以提到来源组件生成时将值准备好或通过其它途径事先准备好。
						 */
						var souce=new Object();
						souce.value=$(this).val();
						curTag = $(this).attr(tag);
						
						console.info($(this).val());
						console.info( searchTag );
						console.info( box);
						console.info( tag);
						// 查找需要写入的组件
						$('['+searchTag+']' , box).each(function(){
							console.warn($(this).get(0).tagName);
							switch($(this).get(0).tagName){
								case "INPUT":
									break;
								case "SELECT":
									break;
							}
							var tempTag = $(this).attr(searchTag);
							var tempTagArr = tempTag.split('.');
							// 找到的组件前缀跟当前来源唯一标识一致，且从来源数组中能够获取到值。
							if(tempTagArr[0] == curTag && souce[tempTagArr[1]]){
								$(this).val(souce[tempTagArr[1]]).change();
							}
						});
					});
				});
			}
		});
	})(jQuery);
	(function($) {
		$.fn.extend({
			comboxtree : function() {
				//////////////////////////////////////////////////	comboxtree	//////////////////////////////////////////////
				var _this = this;
				var $p = $(_this).parent();
				//zTree弹出下拉选择器
				$('.comboxtree', $p).each(function() {
					var $this = $(this);
					var $tree = $($this.data('tree')), 
						width = $this.data('width') || $this.outerWidth(), 
						height = $this.data('height') || 'auto', 
						w = parseFloat($this.css('width')), 
						h = $this.outerHeight()
						;
					var treeid = $tree.attr('id');
					var $box = $('#' + treeid + '_select_box');
					var dialog = $this.data('dialog');
					var setPosition = function($box) {
						$box.css({
							width : width
						});
					};
					$("div").scroll(function () {
						if($('#' + treeid + '_select_box').length){
							$('#' + treeid + '_select_box').hide();
						}
			        });
					$this.click(function() {
						dialog = $(this).data('dialog');
						if(dialog == 1){
							url = TP_URL+'/comboxtreedialog/treeid/'+treeid;
							var realText = $(this).prev('label.label_new').find('span').text();
							title = realText ? realText : '树形弹窗';
							rel = 'comboxtreedialog';
							var options={};
							options.width=width;
							options.height=height;
							options.mask=true;
							options.max=false;
							options.maxable=false;
							options.minable=false;
							options.fresh=false;
							options.resizable=false;
							options.drawable=false;
							options.close=eval($this.attr("close")||"");
							options.param  = {};
							$.pdialog.open(url,rel,title,options);
						}else{
							if($this.hasClass("treeIniting")==false && $box.length == 1){
								$box.remove();
								$box = $('#' + treeid + '_select_box');
							}
							if ($('#' + treeid + '_select_box').length) {
								var box_top = 0;
								if($this.offset().top-$this.parents(".pageFormContent").offset().top>=$box.height()+10){
									box_top = $this.offset().top-$box.height()-10;
								}else{
									box_top = $this.offset().top + $this.height()+3;
								}
								$box.css({
									top:box_top,
									left:$this.offset().left
								});
							}
							
							if($this.hasClass("treeIniting") == false){
								$this.addClass("treeIniting");
							}
							if ($box.length && $box.find('ul').length) {
								setPosition($box);
								$box.show();
								return;
							}
							var zindex = 2;
							var dialog = $.pdialog.getCurrent();
							if (dialog && dialog.length) {
								zindex = dialog.css('zIndex') + 1;
							}
							
							if ($('#' + treeid + '_select_box').length == 0) {
								var boxCls = 'tree-box';
								if($($this).data('comboxtype') == 'dt' )
									boxCls += ' tree-box-dt';
								$box = $('<div id="' + treeid + '_select_box" class="'+boxCls+'"></div>').css({
									//position:'absolute',
									//'zIndex' : zindex,
									height : height,
									overflow : 'auto',
									//background : '#FAFAFA',
									//border : '1px #EEE solid'
								}).hide();
								var box_top = 0;
								if($this.offset().top-$this.parents(".pageFormContent").offset().top>=$box.height()+10){
									box_top = $this.offset().top-$box.height()-10;
								}else{
									box_top = $this.offset().top + $this.height()+3;
								}
								$box.css({
									top:box_top,
									left:$this.offset().left
								});
								$("body").append($box);
							}
							
							//判断是否会出现滚动条
							//-----------------------------------
							var this_height = $this.height();
							var this_top = $this.offset().top;
							var form_top = $this.parents("form").length?$this.parents("form").offset().top:$this.parents(".nbm_relation_form_tabs_navi").siblings("form").eq(0).offset().top;
							var form_height = $this.parents("form").height();
							var tree_box_height = $this.parents("div").find(".tree-box").height();
							if((tree_box_height + this_top + this_height - form_top)>form_height){
								$this.parents("div").find(".tree-box").css("top",-(tree_box_height+this_height-20));
							}
							//-----------------------------------
							
							var ulztree = $('#' + treeid);
							var cloneTree = ulztree.clone();
							// 显示值存放对象
							cloneTree.data('fromObj', $this).removeClass('hide');
							// 真实值存放对象
							var valName = $($this).data('names');
							cloneTree.data('in', $('input[name="' + valName + '"]'));
							cloneTree.attr('id', cloneTree.attr('id') + '_box');
							var searchObj = '' , searchBtnObj='';
							if($(this).data('search')==true){
								var divs = $('<div class="member_searcher tree_search"></div>');
								searchObj = $('<input type="text" class="add_key left" id="'+treeid+'_search"/>');
								divs.append(searchObj);
								searchBtnObj = $('<button type="button" id="'+treeid+'_search_btn" class="btn_member icon-search right enterIndex"></button>');
								divs.append(searchBtnObj);
								$box.append(divs);
								
							}
							$box.append(cloneTree);
							$('#' + treeid + "_box").comboxtreeinit();
							if(searchObj && searchBtnObj){
								searchBtnObj.on("propertychange", function(e){
									searchNode(e, treeid + "_box",searchObj);
								}).on('click',function(e){
									searchNode(e, treeid + "_box",searchObj);
								});
								
								searchObj.on("focus", function(e){
										focusKey(e,searchObj);
									})
									.on("blur", function(e){
										blurKey(e,searchObj);
									});/*
									.on("propertychange", function(e){
										searchNode(e, treeid + "_box",searchObj);
									})
									.on("input", function(e){
										searchNode(e, treeid + "_box",searchObj);
									});*/
							}
							setPosition($box);
							$box.show();
						}
					});
					$('body').on('mousedown', function(e) {
						var $target = $(e.target);
						if (!($this[0] == e.target || ($box && $box.length > 0 && $target.closest('.tree-box').length > 0))) {
							$box.hide();
						}
					});
					var $scroll = $this.closest('[layoutH]');
					if ($scroll && $scroll.length) {
						$scroll.scroll(function() {
							if ($box && $box.length) {
								setPosition($box);
							}
						});
					}
				});
				//////////////////////////////////////////////////	comboxtree end	//////////////////////////////////////////////
			},
			comboxtreeinit : function() {
				//Ztree
				if ($.fn.zTree) {
					var $ztree = this;
					var attrs = jQuery.parseJSON($ztree.attr('attrs'));
					if (!attrs)
						return;
					
					/**
					Y 属性定义 checkbox 被勾选后的情况；
					N 属性定义 checkbox 取消勾选后的情况；
					"p" 表示操作会影响父级节点；
					"s" 表示操作会影响子级节点。
					*/
					// 是否在子级勾取时自动勾取其父级 bynbmxkj@20150831 2338
					// 其默认值最好为true,表示子级勾取后其父级也会被勾中，					
					var chkboxTypeConf={"Y":"s","N":"s"};
					if(attrs.chkboxType=="true"){
						chkboxTypeConf={"Y":"ps","N":"ps"};
					}
					var expandAll = attrs.expandAll || false;
					var simpleData = attrs.simpleData || true;
					var addHoverDom = attrs.addHoverDom || null;
					var removeHoverDom = attrs.removeHoverDom || null;
					var maxAddLevel = attrs.maxAddLevel || 2;
					var addDiyDom = attrs.addDiyDom || null;
					var editEnable = attrs.editEnable || false;
					var showRemoveBtn = attrs.showRemoveBtn || false;
					var showRenameBtn = attrs.showRenameBtn || false;
					var checkEnable = attrs.checkEnable || false;
					var chkStyle = attrs.chkStyle || 'checkbox';
					var radioType = attrs.radioType || null;
					var onClick = attrs.onClick || null;
					var beforeDrag = attrs.beforeDrag || null;
					var beforeDrop = attrs.beforeDrop || null;
					var beforeRemove = attrs.beforeRemove || null;
					var onDrop = attrs.onDrop || null;
					var onRemove = attrs.onRemove || null;
					var onCheck = attrs.onCheck || null;
					var nodes = $ztree.attr('nodes');
					if (!nodes)
						return;
					nodes = nodes.replace(/&apos;/g, "'");
					var zNodes = jQuery.parseJSON(nodes);
					if (addHoverDom) {
						addHoverDom = (addHoverDom == 'edit') ? _addHoverDom : str2Func(addHoverDom);
					}
					if (removeHoverDom) {
						removeHoverDom = (removeHoverDom == 'edit') ? _removeHoverDom : str2Func(removeHoverDom);
					}
					var setting = {
						treeNode : {
							open : false
						},
						view : {
							addHoverDom : addHoverDom || null,
							removeHoverDom : removeHoverDom || null,
							addDiyDom : (addDiyDom != null) ? str2Func(addDiyDom) : null
						},
						edit : {
							enable : editEnable,
							showRemoveBtn : showRemoveBtn,
							showRenameBtn : showRenameBtn
						},
						check : {
							enable : checkEnable,
							chkStyle : chkStyle,
							radioType : radioType,
							isParent:true,
							chkboxType : chkboxTypeConf
 
						},
						callback : {
							onClick : onClick != null ? str2Func(onClick) : null,
							onDrop : onDrop != null ? str2Func(onDrop) : null,
							onCheck : onCheck != null ? str2Func(onCheck) : null,
							beforeRemove : beforeRemove != null ? str2Func(beforeRemove) : null,
							onRemove : onRemove != null ? str2Func(onRemove) : null
						},
						data : {
							simpleData : {
								enable : simpleData
							}
						}, 
						view :{  
				            showIcon: false,  
				            fontCss: getFontCss  
				        }
					};
					var _this = this;
					var this_input = $(_this).parents("div.combox_tree").find("input.comboxtree");
					$.fn.zTree.init($ztree, setting, zNodes);
					var zTree = $.fn.zTree.getZTreeObj($ztree.attr('id'));
					var hv = $(this_input).data('names');
					var val = $(this_input).siblings('[name="'+hv+'"]').val();
					if(val!=""){
						var nodes = zTree.getNodesByParam("key", val, null);
						if(nodes.length){
							nodes[0]['checked'] = true;
							zTree.selectNode(nodes[0],false);
							zTree.updateNode(nodes[0]);
						}
					}
					
					if (expandAll)
						zTree.expandAll(true);
					else
						zTree.expandAll(false);
					/*	旧版本的默认值JS设置勾取效果。
					 var $in = $($('#'+ $ztree.attr('id')).data('in'));
					 console.log($in);
					 if ($in && $in.length){
					 var currentNodeId = $in.val();
					 console.log(currentNodeId);
					 if(currentNodeId!=''){
					 console.log('初始绑定值');
					 var node = zTree.getNodesByParam("id", currentNodeId, null);
					 //node[0]['chkDisabled'] = true;
					 console.log(node);
					 zTree.selectNode(node[0],false);
					 }
					 }*/

				}
			}
		});
	})(jQuery);

})();

/**
 *	树搜索 
 */
function focusKey(e , treesearchkey) {
	if (treesearchkey.hasClass("empty")) {
		treesearchkey.removeClass("empty");
	}
}
function blurKey(e , treesearchkey) {
	if (treesearchkey.get(0).value === "") {
		treesearchkey.addClass("empty");
	}
}
var lastValue = "", nodeList = [], fontCss = {} , searchIndex=0;
function searchNode(e,treeid,key) {
	var zTree = $.fn.zTree.getZTreeObj(treeid);
		var value = $.trim(key.get(0).value);
		var keyType = "";
		keyType = "name";
		if (key.hasClass("empty")) {
			value = "";
		}
		if(nodeList.length >0){
			if(nodeList[searchIndex]){
				updateNodes(true,treeid,value);
			}
		}
		if (lastValue === value) {
			return;
		}
		lastValue = value;
		if (value === "") {
			nodeList = [];
			return;
		}
		updateNodes(false,treeid);
		nodeList = zTree.getNodesByParamFuzzy(keyType, value);
		updateNodes(true,treeid , value);
			

}
function updateNodes(highlight,treeid , keyword) {
	var zTree = $.fn.zTree.getZTreeObj(treeid);
	for( var i=0, l=nodeList.length; i<l; i++) {
		nodeList[i].highlight = highlight;
		zTree.updateNode(nodeList[i]);
	}
	
	var selectnode = null;// 初始化选中节点
	// 判断节点是否存在 不存在则 返回第一个节点 如果第一个节点不存在 则为空
	
	 /*else if(nodeList[0]){
		selectnode = nodeList[0];
	}
	*/
	
	if(nodeList[searchIndex]){
		selectnode = nodeList[searchIndex];
		searchIndex++;
		searchIndex = searchIndex >= nodeList.length? 0 : searchIndex;
	}else{
		if(nodeList[0]){
			selectnode = nodeList[0];
		}else{
			selectnode = null;
			searchIndex = 0;
			return;
		}
	}
	if(selectnode!=null){
		zTree.expandNode(nodeList, true, false);
	}
	// 高亮节点 及展开父节点
	for( var i=0, l=nodeList.length; i<l; i++) {
		nodeList[i].highlight = true;
		zTree.updateNode(nodeList[i]);
	}
	// 选中节点
	zTree.selectNode(selectnode,false);
}
function getFontCss(treeId, treeNode) {
	return (!!treeNode.highlight) ? {color:"#A60000", "font-weight":"bold"} : {color:"#333", "font-weight":"normal"};
}
function filter(node) {
	return !node.isParent && node.isFirstNode;
}
/**
 *	树搜索  end
 */


//单选时选择事件
function S_NodeCheck(e, treeId, treeNode) {
	var zTree = $.fn.zTree.getZTreeObj(treeId), nodes = zTree.getCheckedNodes(true);
	var ids = '', names = '';
	for (var i = 0; i < nodes.length; i++) {
		ids += ',' + nodes[i].key;
		names += ',' + nodes[i].name;
	}
	if (ids.length > 0) {
		ids = ids.substr(1), names = names.substr(1);
	}
	var $from = $($('#' + treeId).data('fromObj'));
	var $in = $($('#' + treeId).data('in'));
	if ($from && $from.length)
		$from.val(names);
	if ($in && $in.length)
		$in.val(ids).change();
	//zTree.destroy();
	$('#' + treeId).parent('div.tree-box').hide();
	//console.log('移除时的ID ：' + treeId);
	//$('#'+ treeId).remove();
}

//多选时选择事件
function S_NodesCheck(e, treeId, treeNode) {
	var zTree = $.fn.zTree.getZTreeObj(treeId), nodes = zTree.getCheckedNodes(true);
	var ids = '', names = '';
	for (var i = 0; i < nodes.length; i++) {
		ids += ',' + nodes[i].key;
		names += ',' + nodes[i].name;
	}
	if (ids.length > 0) {
		ids = ids.substr(1), names = names.substr(1);
	}
	var $from = $($('#' + treeId).data('fromObj'));
	var $in = $($('#' + treeId).data('in'));
	if ($from && $from.length)
		$from.val(names);
	if ($in && $in.length)
		$in.val(ids).change();
	//zTree.destroy();
	//$('#' + treeId).parent('div.tree-box').hide();
	//console.log('移除时的ID ：' + treeId);
	//$('#'+ treeId).remove();
}

//单击事件
function S_NodeClick(event, treeId, treeNode) {
	var zTree = $.fn.zTree.getZTreeObj(treeId);
	zTree.checkNode(treeNode, !treeNode.checked, true, true);
	return false;
}

/**
 * String to Function
 * 参数(函数名)： "getName" 或 "USER.getName" 均可
 * Author: K'naan
 */
function str2Func(method) {
	if (!method || method.length == 0)
		return undefined;
	if ($.isFunction(method))
		return method;
	var m_arr = method.split('.');
	var fn = this;
	for (var i = 0; i < m_arr.length; i++) {
		fn = fn[m_arr[i]];
	}
	if ( typeof fn === "function") {
		return fn;
	}
	return undefined;
}

/**
 * 动态表单内嵌表格删除数据函数
 * @param model		请求处理Model
 * @param table		数据所有表
 * @param id		数据ID
 * @param obj		事件发起对象
 * @date	2014-12-01 17:28
 */
function del_sub_info(model, table, id, obj) {
	if (model && table && id) {
		alertMsg.confirm("确认移除该数据吗？", {
			okCall : function() {
				$.ajax({
					url : TP_APP + '/' + model + '/delsubinfo',
					data : {
						'table' : table,
						'id' : id
					},
					type : 'post',
					dataType : 'json',
					success : function(data) {
						if (data && data.status == 1) {
							$(obj).closest('tr').remove();
						} else {
							alertMsg.error(data.message);
						}
					}
				});
			}
		});
	}
}

function tml_uploadify_Huploadify() {
	if ($.fn.uploadify && $.fn.Huploadify) {
		$(":file[uploader]").each(function() {
			var $this = $(this);
			var options = {
				swf : $this.attr("swf") || TP_PUBLIC + "/Js/uploadify/scripts/uploadify.swf",
				//uploader : TP_PUBLIC + "/Js/uploadify/uploadify.php",
				uploader :  TP_APP+"/Upload/upload",
				buttonText : '选择上传附件',
				fileDataName : $this.attr("name") || "file",
				queueID : $this.attr("id") + "-queue",
				auto : $this.attr("auto") == 'true' ? true : false, //true,
				multi : $this.attr("multi") == 'false' ? false : true, //true,
				width : $this.attr("width") || 105,
				height : $this.attr("height") || 32,
				buttonImage : $this.attr("buttonImage") || TP_PUBLIC + "/Js/uploadify/img/upload.png",
				fileTypeDesc : $this.attr("fileTypeDesc") || "*.mp3;*.mp4;*.rm;*.rmvb;*.mpeg4;*.mpeg3;*.mpeg2;*.mpeg1;*.mov;*.mtv;*.dat;*.wmv;*.avi;*.3gp;*.amv;*.jpg;*.jpeg;*.gif;*.png;*.doc;*.xls;*.csv;*.zip;*.pdf;*.xlsx;*.ppt;*.docx;*.rar;*.html;*.htm;*.txt;",
				fileTypeExts : $this.attr("fileTypeExts") || "*.mp3;*.mp4;*.rm;*.rmvb;*.mpeg4;*.mpeg3;*.mpeg2;*.mpeg1;*.mov;*.mtv;*.dat;*.wmv;*.avi;*.3gp;*.amv;*.jpg;*.jpeg;*.gif;*.png;*.doc;*.xls;*.csv;*.zip;*.pdf;*.xlsx;*.ppt;*.docx;*.rar;*.html;*.htm;*.txt;",
				uploadLimit : $this.attr("uploadLimit") || "50",
				queueSizeLimit : $this.attr("queueSizeLimit") || "50",
				fileSizeLimit : $this.attr("fileSizeLimit") || "20480MB",
				onUploadComplete : onUploadComplete,
				onUploadSuccess : onUploadSuccess,
				upload_save_name : $this.attr("upload_save_name")?$this.attr("upload_save_name"):"",
				//fileDataName:$this.attr("name")||"file",
				//onUploadError : uploadifyError,
				/*以下仅Huploadify适用*/
				breakPoints : false, //断点续传
				saveInfoLocal : false,
				previewImg : false, //预览上传图片
				previewLoadimg : '', //预览前的载入图标
				dragDrop : false,
				showUploadedSize : true,
				removeTimeout : 2000000000, //指定的时间内，删除进度条
				removeCompleted : false
			};
			
			
			options.itemTemplate ='<div id="${fileID}" class="uploadify-queue-item">\
				<div class="uploadify-info">\
				<span style="display:none;" class="swf_upload_save_name"></span>\
				<span class="up_filename" title="${fileName}">${fileName}</span>\
				<span class="btn btn-default btn-sm uploadbtn">上传</span>\
				<span class="delfilebtn">&times;</span>\
				<span><a target="dialog" class="dellink nbm_crop">\
				<i class="icon icon-pencil"></i></a>\
				</span>\
				</div><div class="preview-box"></div>\
				<div class="uploadify-progress">\
				<div class="uploadify-progress-bar">\
				</div></div></div>';
			
			
			/*options.itemTemplateaa = '<div id="${fileID}" class="uploadify-queue-item">\
				<div class="cancel">\
					<a href="javascript:$(\'#${instanceID}\').uploadify(\'cancel\', \'${fileID}\')" title="删除" class="dellink"><i class="icon icon-remove"></i></a>\
					<a target="dialog" class="dellink nbm_crop"><i class="icon icon-pencil"></i></a>\
				</div>\
				<span class="fileName">${fileName} (${fileSize})</span><span class="data"></span>\
				<span style="display:none;" class="swf_upload_save_name"></span>\
				<div class="uploadify-progress">\
					<div class="uploadify-progress-bar"><!--Progress Bar--></div>\
				</div>\
			</div>';*/
			if ($this.attr("onUploadSuccess")) {
				options.onUploadSuccess = DWZ.jsonEval($this.attr("onUploadSuccess"));
			}
			if ($this.attr("onUploadComplete")) {
				options.onUploadComplete = DWZ.jsonEval($this.attr("onUploadComplete"));
			}
			if ($this.attr("scriptData")) {
				options.scriptData = DWZ.jsonEval($this.attr("scriptData"));
			}
			if ($this.attr("formData")) {
				var f = DWZ.jsonEval($this.attr("formData"));
				if (f.uploadpath)
					f.uploadpath = TP_PUBLIC + "/Uploadstemp/" + f.uploadpath;
				options.formData = f;
			}
			if (window.FileReader) {
				var $up = $('<div id="' + $this.attr('id') + '"></div>');
				$up.insertBefore($this).Huploadify(options);
				$this.remove();
			} else {
				$this.uploadify(options);
			}
		});
	}
}

/**
 *	base64加密、解密函数 
 * @example 
 * 		var b = new Base64();
 * 		// 加密
 * 		var str = b.encode("admin:admin");
 * 		// 解密
 * 		str = b.decode(str);
 * 			
 */
function Base64() {
 
	// private property
	_keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 
	// public method for encoding
	this.encode = function (input) {
		var output = "";
		var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
		var i = 0;
		input = _utf8_encode(input);
		while (i < input.length) {
			chr1 = input.charCodeAt(i++);
			chr2 = input.charCodeAt(i++);
			chr3 = input.charCodeAt(i++);
			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;
			if (isNaN(chr2)) {
				enc3 = enc4 = 64;
			} else if (isNaN(chr3)) {
				enc4 = 64;
			}
			output = output +
			_keyStr.charAt(enc1) + _keyStr.charAt(enc2) +
			_keyStr.charAt(enc3) + _keyStr.charAt(enc4);
		}
		return output;
	}
 
	// public method for decoding
	this.decode = function (input) {
		var output = "";
		var chr1, chr2, chr3;
		var enc1, enc2, enc3, enc4;
		var i = 0;
		if(typeof(input)=='String'){
			input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
		}
		while (i < input.length) {
			enc1 = _keyStr.indexOf(input.charAt(i++));
			enc2 = _keyStr.indexOf(input.charAt(i++));
			enc3 = _keyStr.indexOf(input.charAt(i++));
			enc4 = _keyStr.indexOf(input.charAt(i++));
			chr1 = (enc1 << 2) | (enc2 >> 4);
			chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
			chr3 = ((enc3 & 3) << 6) | enc4;
			output = output + String.fromCharCode(chr1);
			if (enc3 != 64) {
				output = output + String.fromCharCode(chr2);
			}
			if (enc4 != 64) {
				output = output + String.fromCharCode(chr3);
			}
		}
		output = _utf8_decode(output);
		return output;
	}
 
	// private method for UTF-8 encoding
	_utf8_encode = function (string) {
		string = string.replace(/\r\n/g,"\n");
		var utftext = "";
		for (var n = 0; n < string.length; n++) {
			var c = string.charCodeAt(n);
			if (c < 128) {
				utftext += String.fromCharCode(c);
			} else if((c > 127) && (c < 2048)) {
				utftext += String.fromCharCode((c >> 6) | 192);
				utftext += String.fromCharCode((c & 63) | 128);
			} else {
				utftext += String.fromCharCode((c >> 12) | 224);
				utftext += String.fromCharCode(((c >> 6) & 63) | 128);
				utftext += String.fromCharCode((c & 63) | 128);
			}
 
		}
		return utftext;
	}
 
	// private method for UTF-8 decoding
	_utf8_decode = function (utftext) {
		var string = "";
		var i = 0;
		var c = c1 = c2 = 0;
		while ( i < utftext.length ) {
			c = utftext.charCodeAt(i);
			if (c < 128) {
				string += String.fromCharCode(c);
				i++;
			} else if((c > 191) && (c < 224)) {
				c2 = utftext.charCodeAt(i+1);
				string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
				i += 2;
			} else {
				c2 = utftext.charCodeAt(i+1);
				c3 = utftext.charCodeAt(i+2);
				string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
				i += 3;
			}
		}
		return string;
	}
}

/**
 * 面板追加功能插件
 */
(function($) {
	$.fn.nbmpanel=function(config){
			// 整合配置
			 debug(this);
			 return this.each(function() {
				 var opts = $.extend({}, $.fn.nbmpanel.defaults, config); 
				    var $this = $(this);  
				    // 重构元素自己的特殊配置
				    var o = $this.data('option') ? $.extend({}, opts, $this.data('option')) : opts;  
				    console.group("面板追加功能插件");
					console.log(o);
					console.groupEnd();
					
				 // 先将显示模板禁用，隐藏
					if(!isNullorEmpty(o.template)){
						console.warn('显示模板未指定！');
						return false;
					}
					$(o.template).find(':input').attr('disabled',true);
					$(o.template).hide();
					
					// 新增功能
					if(!isNullorEmpty(o.addRowObj)){
						console.warn('新增行未指定！');
						return false;
					}
					// 对现有数据初始化
					var existingPanel = $this.find('.'+o.showpanelcls);
					if(existingPanel.length){
						existingPanel.each(function(){
							parseProperty($(this), o);
							$(o.delRowObj , $(this)).on('click' , function(){
								// 当前置函数返回false时，代码不继续执行。
								var ret = $.fn.nbmpanel.delRowBefore(o , this , $this);
								if(false == ret){
									return;
								}
								var delObj = delRow(o , this);
								$.fn.nbmpanel.delRowAfter(o , delObj , $this);
							});
							
							
						});
					}
					
					
					// 绑定事件
					$(o.addRowObj , $this).on('click' , function(){
						try{
							var addobj = addRow(o , $this);
							$(o.delRowObj , addobj).on('click' , function(){
								// 当前置函数返回false时，代码不继续执行。
								var ret = $.fn.nbmpanel.delRowBefore(o , this , $this);
								if(false == ret){
									return;
								}
								var delObj = delRow(o , this);
								$.fn.nbmpanel.delRowAfter(o , delObj , $this);
							});
							$.fn.nbmpanel.addRowAfter(o , addobj , $this);
						}catch(e){
							console.warn('调函数错误:'+e.message);
						}
					});
			 });
			
			//
			/**
			 * 新增行
			 */
			function addRow(c , _this){
				// 克隆模板，生成新行
				var tpl = $(c.template+':first').clone();
				var count = 0;
				var index = 0;
				if(isNullorEmpty(c.showpanelcls)){
					tpl.addClass(c.showpanelcls);
					count = $('>div.'+c.showpanelcls , _this).length;
					if(count){
						index = $('>div:last' , _this).data('index')+1;
					}
					tpl.data('index',index);
				}
				// 将所有的name替换序号
				var _tpl = tpl.html().replace(/#index#/g, index);
				tpl.html(_tpl);
				$('>div:last' , _this).after(tpl);
				$(tpl).show();
				$(tpl).find(':input').attr('disabled',false);
				tpl = parseProperty(tpl , c);
				return tpl;
			}
		};
		/**
		 * 删除行
		 */
		function delRow(c , obj){
			var curobj = $(obj).closest('div.'+c.showpanelcls);
			curobj.remove();
			return curobj;
		}
		
		/**
		 * 将对象下的属性配置解析为具体的属性及操作 
		 */
		function parseProperty(tpl , c){
			// 附加属性
				$(tpl).find('[data-prop]').each(function(){
					var prop = $.extend({}, $(this).data('prop')); 
					var _c_this = this;
					if(prop){
						$.each(prop , function(i , v ){
							if(i && v){
								$(_c_this).attr(i , v);
							}
						});
					}
					$(_c_this).removeAttr('data-prop');
				});
				// 附加操作
				$(tpl).find('[data-oprate]').each(function(){
					var prop = $.extend({}, $(this).data('oprate')); 
					var _c_this = this;
					if(prop){
						$.each(prop , function(i , v ){
							console.warn(i , v);
							if(i && v){
								eval('$(_c_this).'+i+'("'+v+'");');
								//$(_c_this).attr(i , v);
							}
						});
					}
					$(_c_this).removeAttr('data-oprate');
				});
				
				// 附加事件
				$(tpl).find('[data-event]').each(function(){
					var prop = $.extend({}, $(this).data('event')); 
					var _c_this = this;
					if(prop){
						$.each(prop , function(i , v ){
							//console.warn(typeof(eval(v)));
							if(i && v){
								try{
									$(_c_this).on(i,function(){
										nbm_doCallback(v,[this,c]);
									});
									//eval('$(_c_this).on("'+i+'",function(){'+v+'(this,c);});');
								}catch(e){
									console.warn('函数：'+v+' 未定义！');
								}
							}
						});
					}
					$(_c_this).removeAttr('data-event');
				});
				
				return tpl;
		}
		/**
		 * 定义暴露的参数配置对象
		 */
		$.fn.nbmpanel.defaults = {
				template	:'.nbmpanel_item_tpl' , 
				addRowObj	: '.add' , 
				addPanelObj	: '' , 
				delRowObj	: '.del' , 
				delPanelObj	: '' ,
				showpanelcls	: 'nbmpanel_show'
		};
		/**
		 * 定义暴露的行添加后函数
		 */
		$.fn.nbmpanel.addRowAfter=function(o , curobj){
			
		};
		
		/**
		 * 定义暴露的行删除后函数
		 */
		$.fn.nbmpanel.delRowAfter=function(o , curobj){
			
		};
		/**
		 * 定义暴露的行删除前函数
		 */
		$.fn.nbmpanel.delRowBefore=function(o , curobj){
			
		};
		/**
		 * 定义私有的调试函数
		 */
		function debug($obj) {
			if (window.console && window.console.log)
				window.console.log('hilight selection count: ' + $obj.size());  
		}; 
})(jQuery);

(function($){
	$.fn.cascade=function(config){
		var defaults = {'box':'div.linkage','souce':'','levelparam':'clevel','levelClsTag':'nbmxkjlevel','event':'change','tag':'areacascade'};
		
		var c = $.extend(defaults , config);
		var casecadeLevel = c.levelparam;
		destroy(c);
		// 得到当前对象
		$(this).each(function(i){
			if($(this).data('init') == undefined){
				var _this = $(this);
				var souce = _this.data('souce');
				var event = _this.data('event');
				if(_this.closest(c.box).length==0){
					var CCD = $(c.box).selector.split(/[.|#]/);
					var DC = $('<div class="'+CCD[1]+'"></div>');
					_this.after(DC);
					DC.html(_this);
				}
				getLevel(_this , '' , c);
				createNames(_this,'' , c);
				_this.off('change');
				_this.on(c.event , function(e){
					_this.cascade.beforchange($(this) ,$(this).closest(c.box) );
					chageEvent($(this) , _this.data('next') , c , souce , event);
					_this.cascade.afterchange($(this) ,$(this).closest(c.box) );
				});
				//triggerEvent(_this , c);
				// 附加事件
				/*
				 * <select data-event=[1:{'chang':'mychangeeventfunc'} ]>
				 * </select>
				 * 
				 */
				if(event && event[_this.attr(casecadeLevel)]){
					var prop = event[_this.attr(casecadeLevel)];
					var _c_this = this;
					if(prop){
						var i = prop[0];
						var v = prop[1];
						console.log(i+'_'+v);
						if(i && v){
							try{
								//$(_c_this).off(i);
								$(_c_this).on(i,function(){
									nbm_doCallback(v,[this,$(this).closest(c.box)]);
								});
								//eval('$(_c_this).on("'+i+'",function(){'+v+'(this,c);});');
							}catch(e){
								console.warn('函数：'+v+' 未定义！');
							}
						}
					}
				}
				
				// 默认加载项
				if(souce && souce[_this.attr(casecadeLevel)]){
					if(_this.find('option[value="'+souce[_this.attr(casecadeLevel)]+'"]').length){
						_this.find('option[value="'+souce[_this.attr(casecadeLevel)]+'"]').attr('selected',true);
						_this.val(souce[_this.attr(casecadeLevel)]);
						_this.change();
					}
				}
				$(this).data('init' , 'init'); 
			}
		});
	};
	function triggerEvent(obj , c){

		$(obj).off('change').on('change',function(){
			$(obj).trigger(c.event);
		});
	}
	function chageEvent(obj , next , c , souce , event){
		// 先删除已有项
		var casecadeLevel = c.levelparam;
		var level = parseInt($(obj).attr(casecadeLevel));
		var addressStr=$(obj).siblings().filter('[address]').attr('address');
		var address=null;
		if(addressStr){
			address=JSON.parse(addressStr);
		}
		$('.'+c.levelClsTag+(level+1) , $(obj).closest(c.box)).remove();
		if($(obj).val()){
				$.ajax({
					url:TP_APP+'/Common/getDBData',
					type:'post',
					data:{parentid:$(obj).val()},
					dataType:'json',
					success:function(msg){
						if(msg){
							var sel = $('<select class="address_level_elm left select2"></select>');
							var option="<option value=''>请选择</option>";
							$.each(msg , function(i , v){
								if(v && v['id'] && v['name']){
									option += "<option value='"+v['id']+"'>"+v['name']+"</option>";
								}
							});
							//sel.addClass('next');
							//sel.attr('data-cur' , next);
							sel.html(option);
							obj.after(sel);
							sel.select2().change();
							getLevel(sel , obj , c);
							createNames(sel , '' , c);
							// sel.off('change');
							sel.on(c.event , function(){
								sel.cascade.beforchange($(this) ,$(this).closest(c.box) );
								chageEvent($(this) , sel.data('next') , c , souce , event);
								sel.cascade.afterchange($(this) ,$(this).closest(c.box) );
							});
							//triggerEvent(sel,c);
							if(event && event[sel.attr(casecadeLevel)]){
								var prop = event[sel.attr(casecadeLevel)];
								var _c_this = sel;
								if(prop){
									var i = prop[0];
									var v = prop[1];
									if(i && v){
										try{
											//$(_c_this).off(i);
											$(_c_this).on(i,function(){
												nbm_doCallback(v,[sel,$(sel).closest(c.box)]);
											});
											//eval('$(_c_this).on("'+i+'",function(){'+v+'(this,c);});');
										}catch(e){
											console.warn('函数：'+v+' 未定义！');
										}
									}
								}
							}
							// 默认加载项
							if(!address && souce && souce[sel.attr(casecadeLevel)]){
								if(sel.find('option[value="'+souce[sel.attr(casecadeLevel)]+'"]').length){
									sel.find('option[value="'+souce[sel.attr(casecadeLevel)]+'"]').attr('selected',true);
									sel.val(souce[sel.attr(casecadeLevel)]);
                                        sel.change();
								}
							}else{
								//地图组件返回地址回显
								if(address && address.map && sel.find(`option:contains(${address['level'+(level+1)]})`).length){
                                    sel.val(sel.find(`option:contains(${address['level'+(level+1)]})`).val()).change();
                                    if(level==3){
                                        $(obj).siblings().filter('[address]').attr('address',JSON.stringify({'map':false}))
									}
								}
							}
						}
					}
				});
			}
			
	}

	function destroy(c){
		//$('select[cascade]').off(c.event);
		//$('select[cascade]').off('change');
		//$('select.'+c.tag).not('[cascade]').remove();
	}
	function getLevel(cur , parent , c){
		var casecadeLevel = c.levelparam;
		cur = typeof(cur) == "String" ? $(cur) : cur;
		parent = typeof(parent) == "String" ? $(parent) : parent;
		// 层级设定
		//	当前级， 父级 ，样式【包含父级的样式】
		// 检查当前项有不有属性
		var parentID =0;
		var allCls = '';
		var d_cls = '';
		if(parent != undefined && parent){
			parentID = parseInt(parent.attr(casecadeLevel));
			allCls = parent.attr('cls');
			d_cls = parent.attr('data-required');
		}else{
			d_cls = cur.attr('data-required');
		}
		if(cur.attr(casecadeLevel) == undefined){
			cur.attr(casecadeLevel , parentID+1);
		}
		// console.log(d_cls);
		cur.attr('cls' ,allCls+' '+c.levelClsTag+(parentID+1) );
		cur.addClass(c.tag);
		cur.addClass(cur.attr('cls'));
		cur.attr('data-required',d_cls);
		cur.addClass(d_cls);
	}
	function createNames(cur , level , c){
		var casecadeLevel = c.levelparam;
		cur = typeof(cur) == "String" ? $(cur) : cur;
		if(typeof(level) == undefined || level == ''){
			level = cur.attr(casecadeLevel);
		}
		var baseName = cur.attr('names');
		if(baseName != undefined){
			cur.attr('name' , baseName+'['+level+']');
		}else{
			baseName = cur.closest(c.box).find('select[names]').attr('names');
			cur.attr('name' , baseName+'['+level+']');
		}
	}
	
	/**
	 * 定义暴露値改变前事件，通用，不具特殊性
	 */
	$.fn.cascade.beforchange=function(curobj , box){
		
	};
	/**
	 * 定义暴露值改变后事件，通用，不具有特殊性
	 */
	$.fn.cascade.afterchange=function(curobj , box){
		
	};
})(jQuery);
